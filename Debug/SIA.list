
SIA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023e0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080024a0  080024a0  000124a0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080024f8  080024f8  000124f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080024fc  080024fc  000124fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000008  20000000  08002500  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000168  20000008  08002508  00020008  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000170  08002508  00020170  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
  9 .debug_info   000135fd  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000271d  00000000  00000000  0003362d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007dd8  00000000  00000000  00035d4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000990  00000000  00000000  0003db28  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000e08  00000000  00000000  0003e4b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000058b8  00000000  00000000  0003f2c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003862  00000000  00000000  00044b78  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000483da  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001de8  00000000  00000000  00048458  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000008 	.word	0x20000008
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002488 	.word	0x08002488

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000000c 	.word	0x2000000c
 8000104:	08002488 	.word	0x08002488

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000408:	b510      	push	{r4, lr}
 800040a:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 800040c:	f000 ffe0 	bl	80013d0 <HAL_RCC_GetHCLKFreq>
 8000410:	21fa      	movs	r1, #250	; 0xfa
 8000412:	0089      	lsls	r1, r1, #2
 8000414:	f7ff fe82 	bl	800011c <__udivsi3>
 8000418:	f000 fb7c 	bl	8000b14 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 800041c:	2001      	movs	r0, #1
 800041e:	2200      	movs	r2, #0
 8000420:	0021      	movs	r1, r4
 8000422:	4240      	negs	r0, r0
 8000424:	f000 fb3c 	bl	8000aa0 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000428:	2000      	movs	r0, #0
 800042a:	bd10      	pop	{r4, pc}

0800042c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800042c:	2310      	movs	r3, #16
 800042e:	4a06      	ldr	r2, [pc, #24]	; (8000448 <HAL_Init+0x1c>)
{
 8000430:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000432:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000434:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000436:	430b      	orrs	r3, r1
 8000438:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800043a:	f7ff ffe5 	bl	8000408 <HAL_InitTick>
  HAL_MspInit();
 800043e:	f001 febf 	bl	80021c0 <HAL_MspInit>
}
 8000442:	2000      	movs	r0, #0
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			; (mov r8, r8)
 8000448:	40022000 	.word	0x40022000

0800044c <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800044c:	4a02      	ldr	r2, [pc, #8]	; (8000458 <HAL_IncTick+0xc>)
 800044e:	6813      	ldr	r3, [r2, #0]
 8000450:	3301      	adds	r3, #1
 8000452:	6013      	str	r3, [r2, #0]
}
 8000454:	4770      	bx	lr
 8000456:	46c0      	nop			; (mov r8, r8)
 8000458:	20000024 	.word	0x20000024

0800045c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800045c:	4b01      	ldr	r3, [pc, #4]	; (8000464 <HAL_GetTick+0x8>)
 800045e:	6818      	ldr	r0, [r3, #0]
}
 8000460:	4770      	bx	lr
 8000462:	46c0      	nop			; (mov r8, r8)
 8000464:	20000024 	.word	0x20000024

08000468 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000468:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800046a:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 800046c:	f7ff fff6 	bl	800045c <HAL_GetTick>
  uint32_t wait = Delay;
 8000470:	9c01      	ldr	r4, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000472:	0005      	movs	r5, r0
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
     wait++;
 8000474:	1c63      	adds	r3, r4, #1
 8000476:	1e5a      	subs	r2, r3, #1
 8000478:	4193      	sbcs	r3, r2
 800047a:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800047c:	f7ff ffee 	bl	800045c <HAL_GetTick>
 8000480:	1b40      	subs	r0, r0, r5
 8000482:	42a0      	cmp	r0, r4
 8000484:	d3fa      	bcc.n	800047c <HAL_Delay+0x14>
  {
  }
}
 8000486:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

08000488 <ADC_Disable>:
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000488:	2103      	movs	r1, #3
 800048a:	6803      	ldr	r3, [r0, #0]
{
 800048c:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800048e:	689a      	ldr	r2, [r3, #8]
{
 8000490:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000492:	400a      	ands	r2, r1
 8000494:	2a01      	cmp	r2, #1
 8000496:	d001      	beq.n	800049c <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000498:	2000      	movs	r0, #0
}
 800049a:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800049c:	6819      	ldr	r1, [r3, #0]
 800049e:	4211      	tst	r1, r2
 80004a0:	d102      	bne.n	80004a8 <ADC_Disable+0x20>
 80004a2:	68da      	ldr	r2, [r3, #12]
 80004a4:	0412      	lsls	r2, r2, #16
 80004a6:	d5f7      	bpl.n	8000498 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80004a8:	2205      	movs	r2, #5
 80004aa:	689d      	ldr	r5, [r3, #8]
 80004ac:	4015      	ands	r5, r2
 80004ae:	2d01      	cmp	r5, #1
 80004b0:	d11a      	bne.n	80004e8 <ADC_Disable+0x60>
      __HAL_ADC_DISABLE(hadc);
 80004b2:	2202      	movs	r2, #2
 80004b4:	6899      	ldr	r1, [r3, #8]
 80004b6:	430a      	orrs	r2, r1
 80004b8:	609a      	str	r2, [r3, #8]
 80004ba:	2203      	movs	r2, #3
 80004bc:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80004be:	f7ff ffcd 	bl	800045c <HAL_GetTick>
 80004c2:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80004c4:	6823      	ldr	r3, [r4, #0]
 80004c6:	689b      	ldr	r3, [r3, #8]
 80004c8:	422b      	tst	r3, r5
 80004ca:	d0e5      	beq.n	8000498 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80004cc:	f7ff ffc6 	bl	800045c <HAL_GetTick>
 80004d0:	1b80      	subs	r0, r0, r6
 80004d2:	2802      	cmp	r0, #2
 80004d4:	d9f6      	bls.n	80004c4 <ADC_Disable+0x3c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80004d6:	2310      	movs	r3, #16
 80004d8:	6c62      	ldr	r2, [r4, #68]	; 0x44
        return HAL_ERROR;
 80004da:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80004dc:	4313      	orrs	r3, r2
 80004de:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80004e0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80004e2:	431d      	orrs	r5, r3
 80004e4:	64a5      	str	r5, [r4, #72]	; 0x48
        return HAL_ERROR;
 80004e6:	e7d8      	b.n	800049a <ADC_Disable+0x12>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80004e8:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80004ea:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80004ec:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80004ee:	4313      	orrs	r3, r2
 80004f0:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80004f2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80004f4:	4303      	orrs	r3, r0
 80004f6:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 80004f8:	e7cf      	b.n	800049a <ADC_Disable+0x12>
	...

080004fc <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 80004fc:	2300      	movs	r3, #0
{
 80004fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000500:	2103      	movs	r1, #3
  __IO uint32_t wait_loop_index = 0U;
 8000502:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000504:	6803      	ldr	r3, [r0, #0]
{
 8000506:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000508:	689a      	ldr	r2, [r3, #8]
 800050a:	400a      	ands	r2, r1
 800050c:	2a01      	cmp	r2, #1
 800050e:	d107      	bne.n	8000520 <ADC_Enable+0x24>
 8000510:	6819      	ldr	r1, [r3, #0]
 8000512:	4211      	tst	r1, r2
 8000514:	d001      	beq.n	800051a <ADC_Enable+0x1e>
  return HAL_OK;
 8000516:	2000      	movs	r0, #0
}
 8000518:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 800051a:	68da      	ldr	r2, [r3, #12]
 800051c:	0412      	lsls	r2, r2, #16
 800051e:	d4fa      	bmi.n	8000516 <ADC_Enable+0x1a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8000520:	6899      	ldr	r1, [r3, #8]
 8000522:	4a19      	ldr	r2, [pc, #100]	; (8000588 <ADC_Enable+0x8c>)
 8000524:	4211      	tst	r1, r2
 8000526:	d008      	beq.n	800053a <ADC_Enable+0x3e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000528:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800052a:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800052c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800052e:	4313      	orrs	r3, r2
 8000530:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000532:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000534:	4303      	orrs	r3, r0
 8000536:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 8000538:	e7ee      	b.n	8000518 <ADC_Enable+0x1c>
    __HAL_ADC_ENABLE(hadc);
 800053a:	2201      	movs	r2, #1
 800053c:	6899      	ldr	r1, [r3, #8]
 800053e:	430a      	orrs	r2, r1
 8000540:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000542:	4b12      	ldr	r3, [pc, #72]	; (800058c <ADC_Enable+0x90>)
 8000544:	4912      	ldr	r1, [pc, #72]	; (8000590 <ADC_Enable+0x94>)
 8000546:	6818      	ldr	r0, [r3, #0]
 8000548:	f7ff fde8 	bl	800011c <__udivsi3>
 800054c:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 800054e:	9b01      	ldr	r3, [sp, #4]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d115      	bne.n	8000580 <ADC_Enable+0x84>
    tickstart = HAL_GetTick();
 8000554:	f7ff ff82 	bl	800045c <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000558:	2501      	movs	r5, #1
    tickstart = HAL_GetTick();
 800055a:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800055c:	6823      	ldr	r3, [r4, #0]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	422b      	tst	r3, r5
 8000562:	d1d8      	bne.n	8000516 <ADC_Enable+0x1a>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000564:	f7ff ff7a 	bl	800045c <HAL_GetTick>
 8000568:	1b80      	subs	r0, r0, r6
 800056a:	2802      	cmp	r0, #2
 800056c:	d9f6      	bls.n	800055c <ADC_Enable+0x60>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800056e:	2310      	movs	r3, #16
 8000570:	6c62      	ldr	r2, [r4, #68]	; 0x44
        return HAL_ERROR;
 8000572:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000574:	4313      	orrs	r3, r2
 8000576:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000578:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800057a:	432b      	orrs	r3, r5
 800057c:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 800057e:	e7cb      	b.n	8000518 <ADC_Enable+0x1c>
      wait_loop_index--;
 8000580:	9b01      	ldr	r3, [sp, #4]
 8000582:	3b01      	subs	r3, #1
 8000584:	9301      	str	r3, [sp, #4]
 8000586:	e7e2      	b.n	800054e <ADC_Enable+0x52>
 8000588:	80000017 	.word	0x80000017
 800058c:	20000004 	.word	0x20000004
 8000590:	000f4240 	.word	0x000f4240

08000594 <ADC_ConversionStop>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8000594:	2204      	movs	r2, #4
 8000596:	6803      	ldr	r3, [r0, #0]
{
 8000598:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800059a:	6899      	ldr	r1, [r3, #8]
{
 800059c:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800059e:	4211      	tst	r1, r2
 80005a0:	d101      	bne.n	80005a6 <ADC_ConversionStop+0x12>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 80005a2:	2000      	movs	r0, #0
}
 80005a4:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80005a6:	6899      	ldr	r1, [r3, #8]
 80005a8:	4211      	tst	r1, r2
 80005aa:	d006      	beq.n	80005ba <ADC_ConversionStop+0x26>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 80005ac:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80005ae:	0792      	lsls	r2, r2, #30
 80005b0:	d403      	bmi.n	80005ba <ADC_ConversionStop+0x26>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 80005b2:	2210      	movs	r2, #16
 80005b4:	6899      	ldr	r1, [r3, #8]
 80005b6:	430a      	orrs	r2, r1
 80005b8:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80005ba:	f7ff ff4f 	bl	800045c <HAL_GetTick>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80005be:	2504      	movs	r5, #4
    tickstart = HAL_GetTick();
 80005c0:	0006      	movs	r6, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80005c2:	6823      	ldr	r3, [r4, #0]
 80005c4:	689b      	ldr	r3, [r3, #8]
 80005c6:	422b      	tst	r3, r5
 80005c8:	d0eb      	beq.n	80005a2 <ADC_ConversionStop+0xe>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80005ca:	f7ff ff47 	bl	800045c <HAL_GetTick>
 80005ce:	1b80      	subs	r0, r0, r6
 80005d0:	2802      	cmp	r0, #2
 80005d2:	d9f6      	bls.n	80005c2 <ADC_ConversionStop+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80005d4:	2310      	movs	r3, #16
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80005d6:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80005d8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80005da:	4313      	orrs	r3, r2
 80005dc:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80005de:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80005e0:	4303      	orrs	r3, r0
 80005e2:	64a3      	str	r3, [r4, #72]	; 0x48
 80005e4:	e7de      	b.n	80005a4 <ADC_ConversionStop+0x10>
	...

080005e8 <HAL_ADC_Init>:
{
 80005e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005ea:	0004      	movs	r4, r0
    return HAL_ERROR;
 80005ec:	2001      	movs	r0, #1
  if(hadc == NULL)
 80005ee:	2c00      	cmp	r4, #0
 80005f0:	d072      	beq.n	80006d8 <HAL_ADC_Init+0xf0>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80005f2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d106      	bne.n	8000606 <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 80005f8:	0022      	movs	r2, r4
 80005fa:	3240      	adds	r2, #64	; 0x40
    ADC_CLEAR_ERRORCODE(hadc);
 80005fc:	64a3      	str	r3, [r4, #72]	; 0x48
    HAL_ADC_MspInit(hadc);
 80005fe:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 8000600:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 8000602:	f001 fe05 	bl	8002210 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000606:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000608:	06db      	lsls	r3, r3, #27
 800060a:	d500      	bpl.n	800060e <HAL_ADC_Init+0x26>
 800060c:	e079      	b.n	8000702 <HAL_ADC_Init+0x11a>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800060e:	2204      	movs	r2, #4
 8000610:	6823      	ldr	r3, [r4, #0]
 8000612:	6898      	ldr	r0, [r3, #8]
 8000614:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000616:	d000      	beq.n	800061a <HAL_ADC_Init+0x32>
 8000618:	e073      	b.n	8000702 <HAL_ADC_Init+0x11a>
    ADC_STATE_CLR_SET(hadc->State,
 800061a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800061c:	4942      	ldr	r1, [pc, #264]	; (8000728 <HAL_ADC_Init+0x140>)
 800061e:	4011      	ands	r1, r2
 8000620:	2202      	movs	r2, #2
 8000622:	430a      	orrs	r2, r1
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000624:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State,
 8000626:	6462      	str	r2, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000628:	689a      	ldr	r2, [r3, #8]
 800062a:	400a      	ands	r2, r1
 800062c:	2a01      	cmp	r2, #1
 800062e:	d000      	beq.n	8000632 <HAL_ADC_Init+0x4a>
 8000630:	e06d      	b.n	800070e <HAL_ADC_Init+0x126>
 8000632:	6819      	ldr	r1, [r3, #0]
 8000634:	4211      	tst	r1, r2
 8000636:	d102      	bne.n	800063e <HAL_ADC_Init+0x56>
 8000638:	68da      	ldr	r2, [r3, #12]
 800063a:	0412      	lsls	r2, r2, #16
 800063c:	d567      	bpl.n	800070e <HAL_ADC_Init+0x126>
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800063e:	68da      	ldr	r2, [r3, #12]
 8000640:	493a      	ldr	r1, [pc, #232]	; (800072c <HAL_ADC_Init+0x144>)
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8000642:	6a25      	ldr	r5, [r4, #32]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000644:	400a      	ands	r2, r1
 8000646:	60da      	str	r2, [r3, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8000648:	69a2      	ldr	r2, [r4, #24]
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 800064a:	036f      	lsls	r7, r5, #13
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 800064c:	0391      	lsls	r1, r2, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 800064e:	69e2      	ldr	r2, [r4, #28]
 8000650:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8000652:	4311      	orrs	r1, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 8000654:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000656:	3a01      	subs	r2, #1
 8000658:	1e56      	subs	r6, r2, #1
 800065a:	41b2      	sbcs	r2, r6
 800065c:	0316      	lsls	r6, r2, #12
 800065e:	68e2      	ldr	r2, [r4, #12]
 8000660:	4311      	orrs	r1, r2
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8000662:	6922      	ldr	r2, [r4, #16]
 8000664:	430f      	orrs	r7, r1
 8000666:	2a02      	cmp	r2, #2
 8000668:	d100      	bne.n	800066c <HAL_ADC_Init+0x84>
 800066a:	2004      	movs	r0, #4
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 800066c:	6b22      	ldr	r2, [r4, #48]	; 0x30
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800066e:	6a61      	ldr	r1, [r4, #36]	; 0x24
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 8000670:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8000672:	433a      	orrs	r2, r7
 8000674:	4332      	orrs	r2, r6
 8000676:	4302      	orrs	r2, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000678:	2901      	cmp	r1, #1
 800067a:	d104      	bne.n	8000686 <HAL_ADC_Init+0x9e>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800067c:	2d00      	cmp	r5, #0
 800067e:	d12c      	bne.n	80006da <HAL_ADC_Init+0xf2>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000680:	2180      	movs	r1, #128	; 0x80
 8000682:	0249      	lsls	r1, r1, #9
 8000684:	430a      	orrs	r2, r1
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000686:	20c2      	movs	r0, #194	; 0xc2
 8000688:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800068a:	30ff      	adds	r0, #255	; 0xff
 800068c:	4281      	cmp	r1, r0
 800068e:	d002      	beq.n	8000696 <HAL_ADC_Init+0xae>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000690:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8000692:	4301      	orrs	r1, r0
 8000694:	430a      	orrs	r2, r1
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000696:	2080      	movs	r0, #128	; 0x80
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000698:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800069a:	0540      	lsls	r0, r0, #21
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800069c:	4311      	orrs	r1, r2
 800069e:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80006a0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80006a2:	4281      	cmp	r1, r0
 80006a4:	d002      	beq.n	80006ac <HAL_ADC_Init+0xc4>
 80006a6:	1e48      	subs	r0, r1, #1
 80006a8:	2806      	cmp	r0, #6
 80006aa:	d807      	bhi.n	80006bc <HAL_ADC_Init+0xd4>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80006ac:	2507      	movs	r5, #7
 80006ae:	6958      	ldr	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80006b0:	4029      	ands	r1, r5
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80006b2:	43a8      	bics	r0, r5
 80006b4:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80006b6:	6958      	ldr	r0, [r3, #20]
 80006b8:	4301      	orrs	r1, r0
 80006ba:	6159      	str	r1, [r3, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80006bc:	68db      	ldr	r3, [r3, #12]
 80006be:	491c      	ldr	r1, [pc, #112]	; (8000730 <HAL_ADC_Init+0x148>)
 80006c0:	400b      	ands	r3, r1
 80006c2:	429a      	cmp	r2, r3
 80006c4:	d111      	bne.n	80006ea <HAL_ADC_Init+0x102>
      ADC_CLEAR_ERRORCODE(hadc);
 80006c6:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 80006c8:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 80006ca:	64a0      	str	r0, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 80006cc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80006ce:	4393      	bics	r3, r2
 80006d0:	001a      	movs	r2, r3
 80006d2:	2301      	movs	r3, #1
 80006d4:	4313      	orrs	r3, r2
 80006d6:	6463      	str	r3, [r4, #68]	; 0x44
}
 80006d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80006da:	2020      	movs	r0, #32
 80006dc:	6c65      	ldr	r5, [r4, #68]	; 0x44
 80006de:	4328      	orrs	r0, r5
 80006e0:	6460      	str	r0, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80006e2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80006e4:	4301      	orrs	r1, r0
 80006e6:	64a1      	str	r1, [r4, #72]	; 0x48
 80006e8:	e7cd      	b.n	8000686 <HAL_ADC_Init+0x9e>
      ADC_STATE_CLR_SET(hadc->State,
 80006ea:	2212      	movs	r2, #18
 80006ec:	6c63      	ldr	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80006ee:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 80006f0:	4393      	bics	r3, r2
 80006f2:	001a      	movs	r2, r3
 80006f4:	2310      	movs	r3, #16
 80006f6:	4313      	orrs	r3, r2
 80006f8:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80006fa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80006fc:	4303      	orrs	r3, r0
 80006fe:	64a3      	str	r3, [r4, #72]	; 0x48
 8000700:	e7ea      	b.n	80006d8 <HAL_ADC_Init+0xf0>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000702:	2310      	movs	r3, #16
 8000704:	6c62      	ldr	r2, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8000706:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000708:	4313      	orrs	r3, r2
 800070a:	6463      	str	r3, [r4, #68]	; 0x44
 800070c:	e7e4      	b.n	80006d8 <HAL_ADC_Init+0xf0>
      MODIFY_REG(hadc->Instance->CFGR1,
 800070e:	2118      	movs	r1, #24
 8000710:	68da      	ldr	r2, [r3, #12]
 8000712:	438a      	bics	r2, r1
 8000714:	68a1      	ldr	r1, [r4, #8]
 8000716:	430a      	orrs	r2, r1
 8000718:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800071a:	6919      	ldr	r1, [r3, #16]
 800071c:	6862      	ldr	r2, [r4, #4]
 800071e:	0089      	lsls	r1, r1, #2
 8000720:	0889      	lsrs	r1, r1, #2
 8000722:	4311      	orrs	r1, r2
 8000724:	6119      	str	r1, [r3, #16]
 8000726:	e78a      	b.n	800063e <HAL_ADC_Init+0x56>
 8000728:	fffffefd 	.word	0xfffffefd
 800072c:	fffe0219 	.word	0xfffe0219
 8000730:	833fffe7 	.word	0x833fffe7

08000734 <HAL_ADC_Start_DMA>:
{
 8000734:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000736:	6803      	ldr	r3, [r0, #0]
{
 8000738:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800073a:	689b      	ldr	r3, [r3, #8]
{
 800073c:	000f      	movs	r7, r1
 800073e:	9201      	str	r2, [sp, #4]
    tmp_hal_status = HAL_BUSY;
 8000740:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000742:	075b      	lsls	r3, r3, #29
 8000744:	d430      	bmi.n	80007a8 <HAL_ADC_Start_DMA+0x74>
    __HAL_LOCK(hadc);
 8000746:	0026      	movs	r6, r4
 8000748:	3640      	adds	r6, #64	; 0x40
 800074a:	7833      	ldrb	r3, [r6, #0]
 800074c:	2b01      	cmp	r3, #1
 800074e:	d02b      	beq.n	80007a8 <HAL_ADC_Start_DMA+0x74>
 8000750:	2301      	movs	r3, #1
 8000752:	7033      	strb	r3, [r6, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000754:	69e3      	ldr	r3, [r4, #28]
 8000756:	2b01      	cmp	r3, #1
 8000758:	d127      	bne.n	80007aa <HAL_ADC_Start_DMA+0x76>
      ADC_STATE_CLR_SET(hadc->State,
 800075a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800075c:	4a16      	ldr	r2, [pc, #88]	; (80007b8 <HAL_ADC_Start_DMA+0x84>)
      ADC_CLEAR_ERRORCODE(hadc);
 800075e:	2500      	movs	r5, #0
      ADC_STATE_CLR_SET(hadc->State,
 8000760:	401a      	ands	r2, r3
 8000762:	2380      	movs	r3, #128	; 0x80
 8000764:	005b      	lsls	r3, r3, #1
 8000766:	4313      	orrs	r3, r2
 8000768:	6463      	str	r3, [r4, #68]	; 0x44
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800076a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800076c:	4b13      	ldr	r3, [pc, #76]	; (80007bc <HAL_ADC_Start_DMA+0x88>)
      ADC_CLEAR_ERRORCODE(hadc);
 800076e:	64a5      	str	r5, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 8000770:	7035      	strb	r5, [r6, #0]
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000772:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000774:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <HAL_ADC_Start_DMA+0x8c>)
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000776:	6821      	ldr	r1, [r4, #0]
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000778:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800077a:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <HAL_ADC_Start_DMA+0x90>)
 800077c:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800077e:	231c      	movs	r3, #28
 8000780:	600b      	str	r3, [r1, #0]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000782:	684a      	ldr	r2, [r1, #4]
 8000784:	3b0c      	subs	r3, #12
 8000786:	4313      	orrs	r3, r2
 8000788:	604b      	str	r3, [r1, #4]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800078a:	2301      	movs	r3, #1
 800078c:	68ca      	ldr	r2, [r1, #12]
 800078e:	4313      	orrs	r3, r2
 8000790:	60cb      	str	r3, [r1, #12]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000792:	003a      	movs	r2, r7
 8000794:	3140      	adds	r1, #64	; 0x40
 8000796:	9b01      	ldr	r3, [sp, #4]
 8000798:	f000 fa20 	bl	8000bdc <HAL_DMA_Start_IT>
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800079c:	2304      	movs	r3, #4
 800079e:	0028      	movs	r0, r5
 80007a0:	6822      	ldr	r2, [r4, #0]
 80007a2:	6891      	ldr	r1, [r2, #8]
 80007a4:	430b      	orrs	r3, r1
 80007a6:	6093      	str	r3, [r2, #8]
}
 80007a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      tmp_hal_status = ADC_Enable(hadc);
 80007aa:	0020      	movs	r0, r4
 80007ac:	f7ff fea6 	bl	80004fc <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80007b0:	2800      	cmp	r0, #0
 80007b2:	d1f9      	bne.n	80007a8 <HAL_ADC_Start_DMA+0x74>
 80007b4:	e7d1      	b.n	800075a <HAL_ADC_Start_DMA+0x26>
 80007b6:	46c0      	nop			; (mov r8, r8)
 80007b8:	fffff0fe 	.word	0xfffff0fe
 80007bc:	08000839 	.word	0x08000839
 80007c0:	080008ab 	.word	0x080008ab
 80007c4:	080008b9 	.word	0x080008b9

080007c8 <HAL_ADC_Stop_DMA>:
{  
 80007c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 80007ca:	0006      	movs	r6, r0
 80007cc:	3640      	adds	r6, #64	; 0x40
 80007ce:	7833      	ldrb	r3, [r6, #0]
{  
 80007d0:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 80007d2:	2502      	movs	r5, #2
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d020      	beq.n	800081a <HAL_ADC_Stop_DMA+0x52>
 80007d8:	2701      	movs	r7, #1
 80007da:	7037      	strb	r7, [r6, #0]
  tmp_hal_status = ADC_ConversionStop(hadc);
 80007dc:	f7ff feda 	bl	8000594 <ADC_ConversionStop>
 80007e0:	1e05      	subs	r5, r0, #0
  if (tmp_hal_status == HAL_OK)
 80007e2:	d118      	bne.n	8000816 <HAL_ADC_Stop_DMA+0x4e>
    hadc->Instance->CFGR1 &= ~ADC_CFGR1_DMAEN;
 80007e4:	6822      	ldr	r2, [r4, #0]
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 80007e6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    hadc->Instance->CFGR1 &= ~ADC_CFGR1_DMAEN;
 80007e8:	68d3      	ldr	r3, [r2, #12]
 80007ea:	43bb      	bics	r3, r7
 80007ec:	60d3      	str	r3, [r2, #12]
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 80007ee:	f000 fa30 	bl	8000c52 <HAL_DMA_Abort>
 80007f2:	1e05      	subs	r5, r0, #0
    if (tmp_hal_status != HAL_OK)
 80007f4:	d003      	beq.n	80007fe <HAL_ADC_Stop_DMA+0x36>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80007f6:	2340      	movs	r3, #64	; 0x40
 80007f8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80007fa:	4313      	orrs	r3, r2
 80007fc:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80007fe:	2110      	movs	r1, #16
 8000800:	6822      	ldr	r2, [r4, #0]
 8000802:	6853      	ldr	r3, [r2, #4]
 8000804:	438b      	bics	r3, r1
 8000806:	6053      	str	r3, [r2, #4]
    if (tmp_hal_status == HAL_OK)
 8000808:	2800      	cmp	r0, #0
 800080a:	d108      	bne.n	800081e <HAL_ADC_Stop_DMA+0x56>
      tmp_hal_status = ADC_Disable(hadc);
 800080c:	0020      	movs	r0, r4
 800080e:	f7ff fe3b 	bl	8000488 <ADC_Disable>
 8000812:	1e05      	subs	r5, r0, #0
    if (tmp_hal_status == HAL_OK)
 8000814:	d007      	beq.n	8000826 <HAL_ADC_Stop_DMA+0x5e>
  __HAL_UNLOCK(hadc);
 8000816:	2300      	movs	r3, #0
 8000818:	7033      	strb	r3, [r6, #0]
}
 800081a:	0028      	movs	r0, r5
 800081c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ADC_Disable(hadc);
 800081e:	0020      	movs	r0, r4
 8000820:	f7ff fe32 	bl	8000488 <ADC_Disable>
 8000824:	e7f7      	b.n	8000816 <HAL_ADC_Stop_DMA+0x4e>
      ADC_STATE_CLR_SET(hadc->State,
 8000826:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000828:	4a02      	ldr	r2, [pc, #8]	; (8000834 <HAL_ADC_Stop_DMA+0x6c>)
 800082a:	401a      	ands	r2, r3
 800082c:	2301      	movs	r3, #1
 800082e:	4313      	orrs	r3, r2
 8000830:	6463      	str	r3, [r4, #68]	; 0x44
 8000832:	e7f0      	b.n	8000816 <HAL_ADC_Stop_DMA+0x4e>
 8000834:	fffffefe 	.word	0xfffffefe

08000838 <ADC_DMAConvCplt>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000838:	2250      	movs	r2, #80	; 0x50
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800083a:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 800083c:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800083e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000840:	4211      	tst	r1, r2
 8000842:	d12a      	bne.n	800089a <ADC_DMAConvCplt+0x62>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000844:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000846:	32b1      	adds	r2, #177	; 0xb1
 8000848:	32ff      	adds	r2, #255	; 0xff
 800084a:	430a      	orrs	r2, r1
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800084c:	21c0      	movs	r1, #192	; 0xc0
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800084e:	645a      	str	r2, [r3, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000850:	681a      	ldr	r2, [r3, #0]
 8000852:	0109      	lsls	r1, r1, #4
 8000854:	68d0      	ldr	r0, [r2, #12]
 8000856:	4208      	tst	r0, r1
 8000858:	d112      	bne.n	8000880 <ADC_DMAConvCplt+0x48>
 800085a:	6a19      	ldr	r1, [r3, #32]
 800085c:	2900      	cmp	r1, #0
 800085e:	d10f      	bne.n	8000880 <ADC_DMAConvCplt+0x48>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000860:	6811      	ldr	r1, [r2, #0]
 8000862:	0709      	lsls	r1, r1, #28
 8000864:	d50c      	bpl.n	8000880 <ADC_DMAConvCplt+0x48>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000866:	6891      	ldr	r1, [r2, #8]
 8000868:	0749      	lsls	r1, r1, #29
 800086a:	d40d      	bmi.n	8000888 <ADC_DMAConvCplt+0x50>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800086c:	200c      	movs	r0, #12
 800086e:	6851      	ldr	r1, [r2, #4]
 8000870:	4381      	bics	r1, r0
 8000872:	6051      	str	r1, [r2, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000874:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000876:	490b      	ldr	r1, [pc, #44]	; (80008a4 <ADC_DMAConvCplt+0x6c>)
 8000878:	4011      	ands	r1, r2
 800087a:	2201      	movs	r2, #1
 800087c:	430a      	orrs	r2, r1
 800087e:	645a      	str	r2, [r3, #68]	; 0x44
        }
      }
    }

    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc); 
 8000880:	0018      	movs	r0, r3
 8000882:	f001 fb49 	bl	8001f18 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8000886:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000888:	2220      	movs	r2, #32
 800088a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800088c:	430a      	orrs	r2, r1
 800088e:	645a      	str	r2, [r3, #68]	; 0x44
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000890:	2201      	movs	r2, #1
 8000892:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8000894:	430a      	orrs	r2, r1
 8000896:	649a      	str	r2, [r3, #72]	; 0x48
 8000898:	e7f2      	b.n	8000880 <ADC_DMAConvCplt+0x48>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800089a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4798      	blx	r3
}
 80008a0:	e7f1      	b.n	8000886 <ADC_DMAConvCplt+0x4e>
 80008a2:	46c0      	nop			; (mov r8, r8)
 80008a4:	fffffefe 	.word	0xfffffefe

080008a8 <HAL_ADC_ConvHalfCpltCallback>:
 80008a8:	4770      	bx	lr

080008aa <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80008aa:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80008ac:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80008ae:	f7ff fffb 	bl	80008a8 <HAL_ADC_ConvHalfCpltCallback>
}
 80008b2:	bd10      	pop	{r4, pc}

080008b4 <HAL_ADC_LevelOutOfWindowCallback>:
 80008b4:	4770      	bx	lr

080008b6 <HAL_ADC_ErrorCallback>:
}
 80008b6:	4770      	bx	lr

080008b8 <ADC_DMAError>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80008b8:	2340      	movs	r3, #64	; 0x40
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80008ba:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 80008bc:	b510      	push	{r4, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80008be:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80008c0:	4313      	orrs	r3, r2
 80008c2:	6443      	str	r3, [r0, #68]	; 0x44
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80008c4:	2304      	movs	r3, #4
 80008c6:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80008c8:	4313      	orrs	r3, r2
 80008ca:	6483      	str	r3, [r0, #72]	; 0x48
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 80008cc:	f7ff fff3 	bl	80008b6 <HAL_ADC_ErrorCallback>
}
 80008d0:	bd10      	pop	{r4, pc}
	...

080008d4 <HAL_ADC_IRQHandler>:
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80008d4:	2204      	movs	r2, #4
 80008d6:	6803      	ldr	r3, [r0, #0]
{
 80008d8:	b570      	push	{r4, r5, r6, lr}
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80008da:	6819      	ldr	r1, [r3, #0]
{
 80008dc:	0004      	movs	r4, r0
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80008de:	4211      	tst	r1, r2
 80008e0:	d002      	beq.n	80008e8 <HAL_ADC_IRQHandler+0x14>
 80008e2:	6859      	ldr	r1, [r3, #4]
 80008e4:	4211      	tst	r1, r2
 80008e6:	d106      	bne.n	80008f6 <HAL_ADC_IRQHandler+0x22>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80008e8:	2208      	movs	r2, #8
 80008ea:	6819      	ldr	r1, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80008ec:	4211      	tst	r1, r2
 80008ee:	d028      	beq.n	8000942 <HAL_ADC_IRQHandler+0x6e>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80008f0:	6859      	ldr	r1, [r3, #4]
 80008f2:	4211      	tst	r1, r2
 80008f4:	d025      	beq.n	8000942 <HAL_ADC_IRQHandler+0x6e>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80008f6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80008f8:	06d2      	lsls	r2, r2, #27
 80008fa:	d404      	bmi.n	8000906 <HAL_ADC_IRQHandler+0x32>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80008fc:	2280      	movs	r2, #128	; 0x80
 80008fe:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8000900:	0092      	lsls	r2, r2, #2
 8000902:	430a      	orrs	r2, r1
 8000904:	6462      	str	r2, [r4, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000906:	22c0      	movs	r2, #192	; 0xc0
 8000908:	68d9      	ldr	r1, [r3, #12]
 800090a:	0112      	lsls	r2, r2, #4
 800090c:	4211      	tst	r1, r2
 800090e:	d112      	bne.n	8000936 <HAL_ADC_IRQHandler+0x62>
 8000910:	6a22      	ldr	r2, [r4, #32]
 8000912:	2a00      	cmp	r2, #0
 8000914:	d10f      	bne.n	8000936 <HAL_ADC_IRQHandler+0x62>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000916:	681a      	ldr	r2, [r3, #0]
 8000918:	0712      	lsls	r2, r2, #28
 800091a:	d50c      	bpl.n	8000936 <HAL_ADC_IRQHandler+0x62>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800091c:	689a      	ldr	r2, [r3, #8]
 800091e:	0752      	lsls	r2, r2, #29
 8000920:	d43c      	bmi.n	800099c <HAL_ADC_IRQHandler+0xc8>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000922:	210c      	movs	r1, #12
 8000924:	685a      	ldr	r2, [r3, #4]
 8000926:	438a      	bics	r2, r1
 8000928:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 800092a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800092c:	4a20      	ldr	r2, [pc, #128]	; (80009b0 <HAL_ADC_IRQHandler+0xdc>)
 800092e:	401a      	ands	r2, r3
 8000930:	2301      	movs	r3, #1
 8000932:	4313      	orrs	r3, r2
 8000934:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_ADC_ConvCpltCallback(hadc);
 8000936:	0020      	movs	r0, r4
 8000938:	f001 faee 	bl	8001f18 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 800093c:	220c      	movs	r2, #12
 800093e:	6823      	ldr	r3, [r4, #0]
 8000940:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8000942:	2580      	movs	r5, #128	; 0x80
 8000944:	6823      	ldr	r3, [r4, #0]
 8000946:	681a      	ldr	r2, [r3, #0]
 8000948:	422a      	tst	r2, r5
 800094a:	d00c      	beq.n	8000966 <HAL_ADC_IRQHandler+0x92>
 800094c:	685b      	ldr	r3, [r3, #4]
 800094e:	422b      	tst	r3, r5
 8000950:	d009      	beq.n	8000966 <HAL_ADC_IRQHandler+0x92>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000952:	2380      	movs	r3, #128	; 0x80
 8000954:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000956:	025b      	lsls	r3, r3, #9
 8000958:	4313      	orrs	r3, r2
 800095a:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800095c:	0020      	movs	r0, r4
 800095e:	f7ff ffa9 	bl	80008b4 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000962:	6823      	ldr	r3, [r4, #0]
 8000964:	601d      	str	r5, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8000966:	2210      	movs	r2, #16
 8000968:	6823      	ldr	r3, [r4, #0]
 800096a:	6819      	ldr	r1, [r3, #0]
 800096c:	4211      	tst	r1, r2
 800096e:	d014      	beq.n	800099a <HAL_ADC_IRQHandler+0xc6>
 8000970:	6859      	ldr	r1, [r3, #4]
 8000972:	4211      	tst	r1, r2
 8000974:	d011      	beq.n	800099a <HAL_ADC_IRQHandler+0xc6>
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8000976:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000978:	2a01      	cmp	r2, #1
 800097a:	d002      	beq.n	8000982 <HAL_ADC_IRQHandler+0xae>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 800097c:	68da      	ldr	r2, [r3, #12]
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 800097e:	07d2      	lsls	r2, r2, #31
 8000980:	d508      	bpl.n	8000994 <HAL_ADC_IRQHandler+0xc0>
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000982:	2202      	movs	r2, #2
 8000984:	6ca1      	ldr	r1, [r4, #72]	; 0x48
      HAL_ADC_ErrorCallback(hadc);
 8000986:	0020      	movs	r0, r4
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000988:	430a      	orrs	r2, r1
 800098a:	64a2      	str	r2, [r4, #72]	; 0x48
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800098c:	2210      	movs	r2, #16
 800098e:	601a      	str	r2, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 8000990:	f7ff ff91 	bl	80008b6 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000994:	2210      	movs	r2, #16
 8000996:	6823      	ldr	r3, [r4, #0]
 8000998:	601a      	str	r2, [r3, #0]
}
 800099a:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800099c:	2320      	movs	r3, #32
 800099e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80009a0:	4313      	orrs	r3, r2
 80009a2:	6463      	str	r3, [r4, #68]	; 0x44
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009a4:	2301      	movs	r3, #1
 80009a6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80009a8:	4313      	orrs	r3, r2
 80009aa:	64a3      	str	r3, [r4, #72]	; 0x48
 80009ac:	e7c3      	b.n	8000936 <HAL_ADC_IRQHandler+0x62>
 80009ae:	46c0      	nop			; (mov r8, r8)
 80009b0:	fffffefe 	.word	0xfffffefe

080009b4 <HAL_ADC_ConfigChannel>:
{
 80009b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0U;
 80009b6:	2300      	movs	r3, #0
  __HAL_LOCK(hadc);
 80009b8:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0U;
 80009ba:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80009bc:	3440      	adds	r4, #64	; 0x40
 80009be:	7823      	ldrb	r3, [r4, #0]
{
 80009c0:	0005      	movs	r5, r0
  __HAL_LOCK(hadc);
 80009c2:	2002      	movs	r0, #2
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	d02b      	beq.n	8000a20 <HAL_ADC_ConfigChannel+0x6c>
 80009c8:	2301      	movs	r3, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80009ca:	682a      	ldr	r2, [r5, #0]
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80009cc:	6bae      	ldr	r6, [r5, #56]	; 0x38
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80009ce:	6890      	ldr	r0, [r2, #8]
  __HAL_LOCK(hadc);
 80009d0:	7023      	strb	r3, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80009d2:	0740      	lsls	r0, r0, #29
 80009d4:	d452      	bmi.n	8000a7c <HAL_ADC_ConfigChannel+0xc8>
    if (sConfig->Rank != ADC_RANK_NONE)
 80009d6:	482c      	ldr	r0, [pc, #176]	; (8000a88 <HAL_ADC_ConfigChannel+0xd4>)
 80009d8:	684f      	ldr	r7, [r1, #4]
 80009da:	680d      	ldr	r5, [r1, #0]
 80009dc:	4287      	cmp	r7, r0
 80009de:	d03b      	beq.n	8000a58 <HAL_ADC_ConfigChannel+0xa4>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80009e0:	40ab      	lsls	r3, r5
 80009e2:	0018      	movs	r0, r3
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80009e4:	2380      	movs	r3, #128	; 0x80
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80009e6:	6a97      	ldr	r7, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80009e8:	055b      	lsls	r3, r3, #21
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80009ea:	4338      	orrs	r0, r7
 80009ec:	6290      	str	r0, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80009ee:	429e      	cmp	r6, r3
 80009f0:	d00f      	beq.n	8000a12 <HAL_ADC_ConfigChannel+0x5e>
 80009f2:	3e01      	subs	r6, #1
 80009f4:	2e06      	cmp	r6, #6
 80009f6:	d90c      	bls.n	8000a12 <HAL_ADC_ConfigChannel+0x5e>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80009f8:	688b      	ldr	r3, [r1, #8]
 80009fa:	2107      	movs	r1, #7
 80009fc:	6950      	ldr	r0, [r2, #20]
 80009fe:	4008      	ands	r0, r1
 8000a00:	4283      	cmp	r3, r0
 8000a02:	d006      	beq.n	8000a12 <HAL_ADC_ConfigChannel+0x5e>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000a04:	6950      	ldr	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000a06:	400b      	ands	r3, r1
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000a08:	4388      	bics	r0, r1
 8000a0a:	6150      	str	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000a0c:	6950      	ldr	r0, [r2, #20]
 8000a0e:	4303      	orrs	r3, r0
 8000a10:	6153      	str	r3, [r2, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000a12:	002b      	movs	r3, r5
 8000a14:	3b10      	subs	r3, #16
 8000a16:	2b01      	cmp	r3, #1
 8000a18:	d903      	bls.n	8000a22 <HAL_ADC_ConfigChannel+0x6e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a1a:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	7023      	strb	r3, [r4, #0]
}
 8000a20:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000a22:	4b1a      	ldr	r3, [pc, #104]	; (8000a8c <HAL_ADC_ConfigChannel+0xd8>)
 8000a24:	2280      	movs	r2, #128	; 0x80
 8000a26:	6819      	ldr	r1, [r3, #0]
 8000a28:	2d10      	cmp	r5, #16
 8000a2a:	d013      	beq.n	8000a54 <HAL_ADC_ConfigChannel+0xa0>
 8000a2c:	03d2      	lsls	r2, r2, #15
 8000a2e:	430a      	orrs	r2, r1
 8000a30:	601a      	str	r2, [r3, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000a32:	2d10      	cmp	r5, #16
 8000a34:	d1f1      	bne.n	8000a1a <HAL_ADC_ConfigChannel+0x66>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000a36:	4b16      	ldr	r3, [pc, #88]	; (8000a90 <HAL_ADC_ConfigChannel+0xdc>)
 8000a38:	4916      	ldr	r1, [pc, #88]	; (8000a94 <HAL_ADC_ConfigChannel+0xe0>)
 8000a3a:	6818      	ldr	r0, [r3, #0]
 8000a3c:	f7ff fb6e 	bl	800011c <__udivsi3>
 8000a40:	230a      	movs	r3, #10
 8000a42:	4358      	muls	r0, r3
 8000a44:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0U)
 8000a46:	9b01      	ldr	r3, [sp, #4]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d0e6      	beq.n	8000a1a <HAL_ADC_ConfigChannel+0x66>
            wait_loop_index--;
 8000a4c:	9b01      	ldr	r3, [sp, #4]
 8000a4e:	3b01      	subs	r3, #1
 8000a50:	9301      	str	r3, [sp, #4]
 8000a52:	e7f8      	b.n	8000a46 <HAL_ADC_ConfigChannel+0x92>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000a54:	0412      	lsls	r2, r2, #16
 8000a56:	e7ea      	b.n	8000a2e <HAL_ADC_ConfigChannel+0x7a>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000a58:	40ab      	lsls	r3, r5
 8000a5a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8000a5c:	4399      	bics	r1, r3
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000a5e:	002b      	movs	r3, r5
 8000a60:	3b10      	subs	r3, #16
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000a62:	6291      	str	r1, [r2, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d8d8      	bhi.n	8000a1a <HAL_ADC_ConfigChannel+0x66>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000a68:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <HAL_ADC_ConfigChannel+0xd8>)
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	2d10      	cmp	r5, #16
 8000a6e:	d003      	beq.n	8000a78 <HAL_ADC_ConfigChannel+0xc4>
 8000a70:	4909      	ldr	r1, [pc, #36]	; (8000a98 <HAL_ADC_ConfigChannel+0xe4>)
 8000a72:	400a      	ands	r2, r1
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	e7d0      	b.n	8000a1a <HAL_ADC_ConfigChannel+0x66>
 8000a78:	4908      	ldr	r1, [pc, #32]	; (8000a9c <HAL_ADC_ConfigChannel+0xe8>)
 8000a7a:	e7fa      	b.n	8000a72 <HAL_ADC_ConfigChannel+0xbe>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a7c:	2220      	movs	r2, #32
 8000a7e:	6c69      	ldr	r1, [r5, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8000a80:	0018      	movs	r0, r3
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a82:	430a      	orrs	r2, r1
 8000a84:	646a      	str	r2, [r5, #68]	; 0x44
 8000a86:	e7c9      	b.n	8000a1c <HAL_ADC_ConfigChannel+0x68>
 8000a88:	00001001 	.word	0x00001001
 8000a8c:	40012708 	.word	0x40012708
 8000a90:	20000004 	.word	0x20000004
 8000a94:	000f4240 	.word	0x000f4240
 8000a98:	ffbfffff 	.word	0xffbfffff
 8000a9c:	ff7fffff 	.word	0xff7fffff

08000aa0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000aa0:	b570      	push	{r4, r5, r6, lr}
 8000aa2:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000aa4:	2800      	cmp	r0, #0
 8000aa6:	da14      	bge.n	8000ad2 <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aa8:	230f      	movs	r3, #15
 8000aaa:	b2c0      	uxtb	r0, r0
 8000aac:	4003      	ands	r3, r0
 8000aae:	3b08      	subs	r3, #8
 8000ab0:	4a11      	ldr	r2, [pc, #68]	; (8000af8 <HAL_NVIC_SetPriority+0x58>)
 8000ab2:	089b      	lsrs	r3, r3, #2
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	189b      	adds	r3, r3, r2
 8000ab8:	2203      	movs	r2, #3
 8000aba:	4010      	ands	r0, r2
 8000abc:	4090      	lsls	r0, r2
 8000abe:	32fc      	adds	r2, #252	; 0xfc
 8000ac0:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ac2:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ac4:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ac6:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ac8:	69dc      	ldr	r4, [r3, #28]
 8000aca:	43ac      	bics	r4, r5
 8000acc:	4321      	orrs	r1, r4
 8000ace:	61d9      	str	r1, [r3, #28]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000ad0:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ad2:	2503      	movs	r5, #3
 8000ad4:	0883      	lsrs	r3, r0, #2
 8000ad6:	4028      	ands	r0, r5
 8000ad8:	40a8      	lsls	r0, r5
 8000ada:	35fc      	adds	r5, #252	; 0xfc
 8000adc:	002e      	movs	r6, r5
 8000ade:	4a07      	ldr	r2, [pc, #28]	; (8000afc <HAL_NVIC_SetPriority+0x5c>)
 8000ae0:	009b      	lsls	r3, r3, #2
 8000ae2:	189b      	adds	r3, r3, r2
 8000ae4:	22c0      	movs	r2, #192	; 0xc0
 8000ae6:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ae8:	4029      	ands	r1, r5
 8000aea:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aec:	0092      	lsls	r2, r2, #2
 8000aee:	589c      	ldr	r4, [r3, r2]
 8000af0:	43b4      	bics	r4, r6
 8000af2:	4321      	orrs	r1, r4
 8000af4:	5099      	str	r1, [r3, r2]
 8000af6:	e7eb      	b.n	8000ad0 <HAL_NVIC_SetPriority+0x30>
 8000af8:	e000ed00 	.word	0xe000ed00
 8000afc:	e000e100 	.word	0xe000e100

08000b00 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000b00:	231f      	movs	r3, #31
 8000b02:	4018      	ands	r0, r3
 8000b04:	3b1e      	subs	r3, #30
 8000b06:	4083      	lsls	r3, r0
 8000b08:	4a01      	ldr	r2, [pc, #4]	; (8000b10 <HAL_NVIC_EnableIRQ+0x10>)
 8000b0a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000b0c:	4770      	bx	lr
 8000b0e:	46c0      	nop			; (mov r8, r8)
 8000b10:	e000e100 	.word	0xe000e100

08000b14 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b14:	4a09      	ldr	r2, [pc, #36]	; (8000b3c <HAL_SYSTICK_Config+0x28>)
 8000b16:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b18:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d80d      	bhi.n	8000b3a <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b1e:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b20:	4a07      	ldr	r2, [pc, #28]	; (8000b40 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b22:	4808      	ldr	r0, [pc, #32]	; (8000b44 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b24:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b26:	6a03      	ldr	r3, [r0, #32]
 8000b28:	0609      	lsls	r1, r1, #24
 8000b2a:	021b      	lsls	r3, r3, #8
 8000b2c:	0a1b      	lsrs	r3, r3, #8
 8000b2e:	430b      	orrs	r3, r1
 8000b30:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b32:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b34:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b36:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b38:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000b3a:	4770      	bx	lr
 8000b3c:	00ffffff 	.word	0x00ffffff
 8000b40:	e000e010 	.word	0xe000e010
 8000b44:	e000ed00 	.word	0xe000ed00

08000b48 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000b48:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <HAL_SYSTICK_CLKSourceConfig+0x18>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000b4a:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000b4c:	2804      	cmp	r0, #4
 8000b4e:	d102      	bne.n	8000b56 <HAL_SYSTICK_CLKSourceConfig+0xe>
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000b50:	4310      	orrs	r0, r2
 8000b52:	6018      	str	r0, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000b54:	4770      	bx	lr
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000b56:	2104      	movs	r1, #4
 8000b58:	438a      	bics	r2, r1
 8000b5a:	601a      	str	r2, [r3, #0]
}
 8000b5c:	e7fa      	b.n	8000b54 <HAL_SYSTICK_CLKSourceConfig+0xc>
 8000b5e:	46c0      	nop			; (mov r8, r8)
 8000b60:	e000e010 	.word	0xe000e010

08000b64 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000b64:	4770      	bx	lr

08000b66 <HAL_SYSTICK_IRQHandler>:
{
 8000b66:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 8000b68:	f7ff fffc 	bl	8000b64 <HAL_SYSTICK_Callback>
}
 8000b6c:	bd10      	pop	{r4, pc}
	...

08000b70 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000b70:	b570      	push	{r4, r5, r6, lr}
 8000b72:	0004      	movs	r4, r0
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
  {
    return HAL_ERROR;
 8000b74:	2001      	movs	r0, #1
  if(NULL == hdma)
 8000b76:	2c00      	cmp	r4, #0
 8000b78:	d028      	beq.n	8000bcc <HAL_DMA_Init+0x5c>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000b7a:	2302      	movs	r3, #2

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000b7c:	6820      	ldr	r0, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8000b7e:	1ca5      	adds	r5, r4, #2
 8000b80:	77eb      	strb	r3, [r5, #31]
  tmp = hdma->Instance->CCR;
 8000b82:	6802      	ldr	r2, [r0, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000b84:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <HAL_DMA_Init+0x60>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000b86:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000b88:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 8000b8a:	6863      	ldr	r3, [r4, #4]
 8000b8c:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b8e:	68e1      	ldr	r1, [r4, #12]
 8000b90:	430b      	orrs	r3, r1
 8000b92:	6921      	ldr	r1, [r4, #16]
 8000b94:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b96:	6961      	ldr	r1, [r4, #20]
 8000b98:	430b      	orrs	r3, r1
 8000b9a:	69a1      	ldr	r1, [r4, #24]
 8000b9c:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b9e:	69e1      	ldr	r1, [r4, #28]
 8000ba0:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 8000ba2:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000ba4:	6003      	str	r3, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000ba6:	4b0b      	ldr	r3, [pc, #44]	; (8000bd4 <HAL_DMA_Init+0x64>)
 8000ba8:	2114      	movs	r1, #20
 8000baa:	18c0      	adds	r0, r0, r3
 8000bac:	f7ff fab6 	bl	800011c <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8000bb0:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <HAL_DMA_Init+0x68>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000bb2:	0080      	lsls	r0, r0, #2
 8000bb4:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000bb6:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->XferCpltCallback = NULL;
 8000bb8:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000bba:	2301      	movs	r3, #1
  hdma->XferCpltCallback = NULL;
 8000bbc:	62a0      	str	r0, [r4, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8000bbe:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8000bc0:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8000bc2:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000bc4:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->Lock = HAL_UNLOCKED;
 8000bc6:	18e4      	adds	r4, r4, r3
  hdma->State = HAL_DMA_STATE_READY;
 8000bc8:	77eb      	strb	r3, [r5, #31]
  hdma->Lock = HAL_UNLOCKED;
 8000bca:	77e0      	strb	r0, [r4, #31]
}  
 8000bcc:	bd70      	pop	{r4, r5, r6, pc}
 8000bce:	46c0      	nop			; (mov r8, r8)
 8000bd0:	ffffc00f 	.word	0xffffc00f
 8000bd4:	bffdfff8 	.word	0xbffdfff8
 8000bd8:	40020000 	.word	0x40020000

08000bdc <HAL_DMA_Start_IT>:
{
 8000bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8000bde:	1c46      	adds	r6, r0, #1
 8000be0:	7ff5      	ldrb	r5, [r6, #31]
 8000be2:	2402      	movs	r4, #2
 8000be4:	2d01      	cmp	r5, #1
 8000be6:	d026      	beq.n	8000c36 <HAL_DMA_Start_IT+0x5a>
 8000be8:	2501      	movs	r5, #1
 8000bea:	77f5      	strb	r5, [r6, #31]
  if(HAL_DMA_STATE_READY == hdma->State)
 8000bec:	1905      	adds	r5, r0, r4
 8000bee:	46ac      	mov	ip, r5
 8000bf0:	7fed      	ldrb	r5, [r5, #31]
 8000bf2:	2700      	movs	r7, #0
 8000bf4:	b2ed      	uxtb	r5, r5
 8000bf6:	2d01      	cmp	r5, #1
 8000bf8:	d129      	bne.n	8000c4e <HAL_DMA_Start_IT+0x72>
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000bfa:	4666      	mov	r6, ip
 8000bfc:	77f4      	strb	r4, [r6, #31]
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000bfe:	6804      	ldr	r4, [r0, #0]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c00:	6387      	str	r7, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000c02:	6826      	ldr	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000c04:	6c07      	ldr	r7, [r0, #64]	; 0x40
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000c06:	43ae      	bics	r6, r5
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000c08:	40bd      	lsls	r5, r7
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000c0a:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000c0c:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 8000c0e:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 8000c10:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000c12:	6843      	ldr	r3, [r0, #4]
 8000c14:	6805      	ldr	r5, [r0, #0]
 8000c16:	2b10      	cmp	r3, #16
 8000c18:	d10f      	bne.n	8000c3a <HAL_DMA_Start_IT+0x5e>
    hdma->Instance->CPAR = DstAddress;
 8000c1a:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000c1c:	60e1      	str	r1, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8000c1e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c20:	6822      	ldr	r2, [r4, #0]
    if(NULL != hdma->XferHalfCpltCallback )
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d00c      	beq.n	8000c40 <HAL_DMA_Start_IT+0x64>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c26:	230e      	movs	r3, #14
 8000c28:	4313      	orrs	r3, r2
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000c2a:	6023      	str	r3, [r4, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000c2c:	2301      	movs	r3, #1
	HAL_StatusTypeDef status = HAL_OK;
 8000c2e:	2400      	movs	r4, #0
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000c30:	682a      	ldr	r2, [r5, #0]
 8000c32:	4313      	orrs	r3, r2
 8000c34:	602b      	str	r3, [r5, #0]
} 
 8000c36:	0020      	movs	r0, r4
 8000c38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = SrcAddress;
 8000c3a:	60a1      	str	r1, [r4, #8]
    hdma->Instance->CMAR = DstAddress;
 8000c3c:	60e2      	str	r2, [r4, #12]
 8000c3e:	e7ee      	b.n	8000c1e <HAL_DMA_Start_IT+0x42>
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000c40:	230a      	movs	r3, #10
 8000c42:	4313      	orrs	r3, r2
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000c44:	2204      	movs	r2, #4
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000c46:	6023      	str	r3, [r4, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000c48:	6823      	ldr	r3, [r4, #0]
 8000c4a:	4393      	bics	r3, r2
 8000c4c:	e7ed      	b.n	8000c2a <HAL_DMA_Start_IT+0x4e>
    __HAL_UNLOCK(hdma); 
 8000c4e:	77f7      	strb	r7, [r6, #31]
 8000c50:	e7f1      	b.n	8000c36 <HAL_DMA_Start_IT+0x5a>

08000c52 <HAL_DMA_Abort>:
	 hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c52:	210e      	movs	r1, #14
 8000c54:	6803      	ldr	r3, [r0, #0]
{
 8000c56:	b510      	push	{r4, lr}
	 hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c58:	681a      	ldr	r2, [r3, #0]
	hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000c5a:	6c04      	ldr	r4, [r0, #64]	; 0x40
	 hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c5c:	438a      	bics	r2, r1
 8000c5e:	601a      	str	r2, [r3, #0]
	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000c60:	2201      	movs	r2, #1
 8000c62:	6819      	ldr	r1, [r3, #0]
 8000c64:	4391      	bics	r1, r2
 8000c66:	6019      	str	r1, [r3, #0]
	hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000c68:	0011      	movs	r1, r2
 8000c6a:	40a1      	lsls	r1, r4
 8000c6c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8000c6e:	6059      	str	r1, [r3, #4]
	hdma->State = HAL_DMA_STATE_READY; 
 8000c70:	1c83      	adds	r3, r0, #2
 8000c72:	77da      	strb	r2, [r3, #31]
	__HAL_UNLOCK(hdma);
 8000c74:	1883      	adds	r3, r0, r2
 8000c76:	2000      	movs	r0, #0
 8000c78:	77d8      	strb	r0, [r3, #31]
}
 8000c7a:	bd10      	pop	{r4, pc}

08000c7c <HAL_DMA_IRQHandler>:
{
 8000c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000c7e:	2704      	movs	r7, #4
 8000c80:	003e      	movs	r6, r7
 8000c82:	6c01      	ldr	r1, [r0, #64]	; 0x40
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000c84:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000c86:	408e      	lsls	r6, r1
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000c88:	6815      	ldr	r5, [r2, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000c8a:	6803      	ldr	r3, [r0, #0]
 8000c8c:	681c      	ldr	r4, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000c8e:	422e      	tst	r6, r5
 8000c90:	d00d      	beq.n	8000cae <HAL_DMA_IRQHandler+0x32>
 8000c92:	423c      	tst	r4, r7
 8000c94:	d00b      	beq.n	8000cae <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c96:	6819      	ldr	r1, [r3, #0]
 8000c98:	0689      	lsls	r1, r1, #26
 8000c9a:	d402      	bmi.n	8000ca2 <HAL_DMA_IRQHandler+0x26>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000c9c:	6819      	ldr	r1, [r3, #0]
 8000c9e:	43b9      	bics	r1, r7
 8000ca0:	6019      	str	r1, [r3, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 8000ca2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000ca4:	6056      	str	r6, [r2, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d019      	beq.n	8000cde <HAL_DMA_IRQHandler+0x62>
    	hdma->XferErrorCallback(hdma);
 8000caa:	4798      	blx	r3
}  
 8000cac:	e017      	b.n	8000cde <HAL_DMA_IRQHandler+0x62>
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000cae:	2702      	movs	r7, #2
 8000cb0:	003e      	movs	r6, r7
 8000cb2:	408e      	lsls	r6, r1
 8000cb4:	422e      	tst	r6, r5
 8000cb6:	d013      	beq.n	8000ce0 <HAL_DMA_IRQHandler+0x64>
 8000cb8:	423c      	tst	r4, r7
 8000cba:	d011      	beq.n	8000ce0 <HAL_DMA_IRQHandler+0x64>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000cbc:	6819      	ldr	r1, [r3, #0]
 8000cbe:	0689      	lsls	r1, r1, #26
 8000cc0:	d406      	bmi.n	8000cd0 <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000cc2:	240a      	movs	r4, #10
 8000cc4:	6819      	ldr	r1, [r3, #0]
 8000cc6:	43a1      	bics	r1, r4
 8000cc8:	6019      	str	r1, [r3, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8000cca:	2101      	movs	r1, #1
 8000ccc:	19c3      	adds	r3, r0, r7
 8000cce:	77d9      	strb	r1, [r3, #31]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000cd0:	6056      	str	r6, [r2, #4]
  	__HAL_UNLOCK(hdma);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	1c43      	adds	r3, r0, #1
 8000cd6:	77da      	strb	r2, [r3, #31]
  	if(hdma->XferCpltCallback != NULL)
 8000cd8:	6a83      	ldr	r3, [r0, #40]	; 0x28
    if(hdma->XferErrorCallback != NULL)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d1e5      	bne.n	8000caa <HAL_DMA_IRQHandler+0x2e>
}  
 8000cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000ce0:	2608      	movs	r6, #8
 8000ce2:	0037      	movs	r7, r6
 8000ce4:	408f      	lsls	r7, r1
 8000ce6:	423d      	tst	r5, r7
 8000ce8:	d0f9      	beq.n	8000cde <HAL_DMA_IRQHandler+0x62>
 8000cea:	4234      	tst	r4, r6
 8000cec:	d0f7      	beq.n	8000cde <HAL_DMA_IRQHandler+0x62>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000cee:	250e      	movs	r5, #14
 8000cf0:	681c      	ldr	r4, [r3, #0]
 8000cf2:	43ac      	bics	r4, r5
 8000cf4:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	001c      	movs	r4, r3
 8000cfa:	408c      	lsls	r4, r1
 8000cfc:	6054      	str	r4, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;    
 8000cfe:	1c82      	adds	r2, r0, #2
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000d00:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8000d02:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma); 
 8000d04:	2200      	movs	r2, #0
 8000d06:	18c3      	adds	r3, r0, r3
 8000d08:	77da      	strb	r2, [r3, #31]
    if(hdma->XferErrorCallback != NULL)
 8000d0a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000d0c:	e7e5      	b.n	8000cda <HAL_DMA_IRQHandler+0x5e>
	...

08000d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000d10:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000d12:	680b      	ldr	r3, [r1, #0]
{ 
 8000d14:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000d16:	9302      	str	r3, [sp, #8]
  uint32_t position = 0x00U;
 8000d18:	2300      	movs	r3, #0
{ 
 8000d1a:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000d1c:	9a02      	ldr	r2, [sp, #8]
 8000d1e:	40da      	lsrs	r2, r3
 8000d20:	d101      	bne.n	8000d26 <HAL_GPIO_Init+0x16>
      }
    }
    
    position++;
  } 
}
 8000d22:	b007      	add	sp, #28
 8000d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000d26:	2201      	movs	r2, #1
 8000d28:	409a      	lsls	r2, r3
 8000d2a:	9203      	str	r2, [sp, #12]
 8000d2c:	9903      	ldr	r1, [sp, #12]
 8000d2e:	9a02      	ldr	r2, [sp, #8]
 8000d30:	400a      	ands	r2, r1
 8000d32:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 8000d34:	d100      	bne.n	8000d38 <HAL_GPIO_Init+0x28>
 8000d36:	e08c      	b.n	8000e52 <HAL_GPIO_Init+0x142>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000d38:	9a01      	ldr	r2, [sp, #4]
 8000d3a:	2110      	movs	r1, #16
 8000d3c:	6852      	ldr	r2, [r2, #4]
 8000d3e:	0016      	movs	r6, r2
 8000d40:	438e      	bics	r6, r1
 8000d42:	2e02      	cmp	r6, #2
 8000d44:	d10e      	bne.n	8000d64 <HAL_GPIO_Init+0x54>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000d46:	2507      	movs	r5, #7
 8000d48:	401d      	ands	r5, r3
 8000d4a:	00ad      	lsls	r5, r5, #2
 8000d4c:	3901      	subs	r1, #1
 8000d4e:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3];
 8000d50:	08dc      	lsrs	r4, r3, #3
 8000d52:	00a4      	lsls	r4, r4, #2
 8000d54:	1904      	adds	r4, r0, r4
 8000d56:	6a27      	ldr	r7, [r4, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000d58:	438f      	bics	r7, r1
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8000d5a:	9901      	ldr	r1, [sp, #4]
 8000d5c:	6909      	ldr	r1, [r1, #16]
 8000d5e:	40a9      	lsls	r1, r5
 8000d60:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3U] = temp;
 8000d62:	6227      	str	r7, [r4, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000d64:	2403      	movs	r4, #3
 8000d66:	005f      	lsls	r7, r3, #1
 8000d68:	40bc      	lsls	r4, r7
 8000d6a:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 8000d6c:	6805      	ldr	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d6e:	3e01      	subs	r6, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000d70:	4025      	ands	r5, r4
 8000d72:	46ac      	mov	ip, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d74:	2503      	movs	r5, #3
 8000d76:	4015      	ands	r5, r2
 8000d78:	40bd      	lsls	r5, r7
 8000d7a:	4661      	mov	r1, ip
 8000d7c:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 8000d7e:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d80:	2e01      	cmp	r6, #1
 8000d82:	d80f      	bhi.n	8000da4 <HAL_GPIO_Init+0x94>
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000d84:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR; 
 8000d86:	6886      	ldr	r6, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000d88:	68cd      	ldr	r5, [r1, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d8a:	4026      	ands	r6, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000d8c:	40bd      	lsls	r5, r7
 8000d8e:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8000d90:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8000d92:	6846      	ldr	r6, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000d94:	9903      	ldr	r1, [sp, #12]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d96:	0915      	lsrs	r5, r2, #4
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000d98:	438e      	bics	r6, r1
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d9a:	2101      	movs	r1, #1
 8000d9c:	400d      	ands	r5, r1
 8000d9e:	409d      	lsls	r5, r3
 8000da0:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8000da2:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 8000da4:	68c5      	ldr	r5, [r0, #12]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000da6:	9901      	ldr	r1, [sp, #4]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000da8:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000daa:	688d      	ldr	r5, [r1, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000dac:	2180      	movs	r1, #128	; 0x80
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000dae:	40bd      	lsls	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000db0:	0549      	lsls	r1, r1, #21
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000db2:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8000db4:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000db6:	420a      	tst	r2, r1
 8000db8:	d04b      	beq.n	8000e52 <HAL_GPIO_Init+0x142>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dba:	2101      	movs	r1, #1
 8000dbc:	4c26      	ldr	r4, [pc, #152]	; (8000e58 <HAL_GPIO_Init+0x148>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000dbe:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dc0:	69a5      	ldr	r5, [r4, #24]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000dc2:	401e      	ands	r6, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dc4:	430d      	orrs	r5, r1
 8000dc6:	61a5      	str	r5, [r4, #24]
 8000dc8:	69a4      	ldr	r4, [r4, #24]
        temp = SYSCFG->EXTICR[position >> 2];
 8000dca:	089d      	lsrs	r5, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dcc:	400c      	ands	r4, r1
 8000dce:	9405      	str	r4, [sp, #20]
 8000dd0:	9c05      	ldr	r4, [sp, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000dd2:	240f      	movs	r4, #15
 8000dd4:	4921      	ldr	r1, [pc, #132]	; (8000e5c <HAL_GPIO_Init+0x14c>)
 8000dd6:	00ad      	lsls	r5, r5, #2
 8000dd8:	00b6      	lsls	r6, r6, #2
 8000dda:	186d      	adds	r5, r5, r1
 8000ddc:	40b4      	lsls	r4, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dde:	2190      	movs	r1, #144	; 0x90
        temp = SYSCFG->EXTICR[position >> 2];
 8000de0:	68af      	ldr	r7, [r5, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000de2:	05c9      	lsls	r1, r1, #23
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000de4:	43a7      	bics	r7, r4
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000de6:	2400      	movs	r4, #0
 8000de8:	4288      	cmp	r0, r1
 8000dea:	d00c      	beq.n	8000e06 <HAL_GPIO_Init+0xf6>
 8000dec:	491c      	ldr	r1, [pc, #112]	; (8000e60 <HAL_GPIO_Init+0x150>)
 8000dee:	3401      	adds	r4, #1
 8000df0:	4288      	cmp	r0, r1
 8000df2:	d008      	beq.n	8000e06 <HAL_GPIO_Init+0xf6>
 8000df4:	491b      	ldr	r1, [pc, #108]	; (8000e64 <HAL_GPIO_Init+0x154>)
 8000df6:	3401      	adds	r4, #1
 8000df8:	4288      	cmp	r0, r1
 8000dfa:	d004      	beq.n	8000e06 <HAL_GPIO_Init+0xf6>
 8000dfc:	491a      	ldr	r1, [pc, #104]	; (8000e68 <HAL_GPIO_Init+0x158>)
 8000dfe:	3403      	adds	r4, #3
 8000e00:	4288      	cmp	r0, r1
 8000e02:	d100      	bne.n	8000e06 <HAL_GPIO_Init+0xf6>
 8000e04:	3c02      	subs	r4, #2
 8000e06:	40b4      	lsls	r4, r6
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000e08:	9900      	ldr	r1, [sp, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e0a:	433c      	orrs	r4, r7
          SET_BIT(temp, iocurrent); 
 8000e0c:	000e      	movs	r6, r1
        SYSCFG->EXTICR[position >> 2] = temp;
 8000e0e:	60ac      	str	r4, [r5, #8]
        temp = EXTI->IMR;
 8000e10:	4c16      	ldr	r4, [pc, #88]	; (8000e6c <HAL_GPIO_Init+0x15c>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000e12:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 8000e14:	6827      	ldr	r7, [r4, #0]
          SET_BIT(temp, iocurrent); 
 8000e16:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e18:	03d1      	lsls	r1, r2, #15
 8000e1a:	d401      	bmi.n	8000e20 <HAL_GPIO_Init+0x110>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000e1c:	003e      	movs	r6, r7
 8000e1e:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 8000e20:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 8000e22:	6867      	ldr	r7, [r4, #4]
          SET_BIT(temp, iocurrent); 
 8000e24:	9e00      	ldr	r6, [sp, #0]
 8000e26:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e28:	0391      	lsls	r1, r2, #14
 8000e2a:	d401      	bmi.n	8000e30 <HAL_GPIO_Init+0x120>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000e2c:	003e      	movs	r6, r7
 8000e2e:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 8000e30:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 8000e32:	68a7      	ldr	r7, [r4, #8]
          SET_BIT(temp, iocurrent); 
 8000e34:	9e00      	ldr	r6, [sp, #0]
 8000e36:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e38:	02d1      	lsls	r1, r2, #11
 8000e3a:	d401      	bmi.n	8000e40 <HAL_GPIO_Init+0x130>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000e3c:	003e      	movs	r6, r7
 8000e3e:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 8000e40:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 8000e42:	68e6      	ldr	r6, [r4, #12]
          SET_BIT(temp, iocurrent); 
 8000e44:	9f00      	ldr	r7, [sp, #0]
 8000e46:	4337      	orrs	r7, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e48:	0292      	lsls	r2, r2, #10
 8000e4a:	d401      	bmi.n	8000e50 <HAL_GPIO_Init+0x140>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000e4c:	402e      	ands	r6, r5
 8000e4e:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 8000e50:	60e7      	str	r7, [r4, #12]
    position++;
 8000e52:	3301      	adds	r3, #1
 8000e54:	e762      	b.n	8000d1c <HAL_GPIO_Init+0xc>
 8000e56:	46c0      	nop			; (mov r8, r8)
 8000e58:	40021000 	.word	0x40021000
 8000e5c:	40010000 	.word	0x40010000
 8000e60:	48000400 	.word	0x48000400
 8000e64:	48000800 	.word	0x48000800
 8000e68:	48000c00 	.word	0x48000c00
 8000e6c:	40010400 	.word	0x40010400

08000e70 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e70:	2a00      	cmp	r2, #0
 8000e72:	d001      	beq.n	8000e78 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e74:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e76:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e78:	6281      	str	r1, [r0, #40]	; 0x28
}
 8000e7a:	e7fc      	b.n	8000e76 <HAL_GPIO_WritePin+0x6>

08000e7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e7e:	6803      	ldr	r3, [r0, #0]
{
 8000e80:	b085      	sub	sp, #20
 8000e82:	0005      	movs	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e84:	07db      	lsls	r3, r3, #31
 8000e86:	d42f      	bmi.n	8000ee8 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e88:	682b      	ldr	r3, [r5, #0]
 8000e8a:	079b      	lsls	r3, r3, #30
 8000e8c:	d500      	bpl.n	8000e90 <HAL_RCC_OscConfig+0x14>
 8000e8e:	e081      	b.n	8000f94 <HAL_RCC_OscConfig+0x118>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e90:	682b      	ldr	r3, [r5, #0]
 8000e92:	071b      	lsls	r3, r3, #28
 8000e94:	d500      	bpl.n	8000e98 <HAL_RCC_OscConfig+0x1c>
 8000e96:	e0bc      	b.n	8001012 <HAL_RCC_OscConfig+0x196>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e98:	682b      	ldr	r3, [r5, #0]
 8000e9a:	075b      	lsls	r3, r3, #29
 8000e9c:	d500      	bpl.n	8000ea0 <HAL_RCC_OscConfig+0x24>
 8000e9e:	e0df      	b.n	8001060 <HAL_RCC_OscConfig+0x1e4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000ea0:	682b      	ldr	r3, [r5, #0]
 8000ea2:	06db      	lsls	r3, r3, #27
 8000ea4:	d51a      	bpl.n	8000edc <HAL_RCC_OscConfig+0x60>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000ea6:	696a      	ldr	r2, [r5, #20]
 8000ea8:	4cb5      	ldr	r4, [pc, #724]	; (8001180 <HAL_RCC_OscConfig+0x304>)
 8000eaa:	2304      	movs	r3, #4
 8000eac:	2a01      	cmp	r2, #1
 8000eae:	d000      	beq.n	8000eb2 <HAL_RCC_OscConfig+0x36>
 8000eb0:	e14b      	b.n	800114a <HAL_RCC_OscConfig+0x2ce>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000eb2:	6b61      	ldr	r1, [r4, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000eb4:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000eb6:	430b      	orrs	r3, r1
 8000eb8:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8000eba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000ebc:	431a      	orrs	r2, r3
 8000ebe:	6362      	str	r2, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000ec0:	f7ff facc 	bl	800045c <HAL_GetTick>
 8000ec4:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000ec6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000ec8:	4233      	tst	r3, r6
 8000eca:	d100      	bne.n	8000ece <HAL_RCC_OscConfig+0x52>
 8000ecc:	e136      	b.n	800113c <HAL_RCC_OscConfig+0x2c0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000ece:	21f8      	movs	r1, #248	; 0xf8
 8000ed0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000ed2:	69ab      	ldr	r3, [r5, #24]
 8000ed4:	438a      	bics	r2, r1
 8000ed6:	00db      	lsls	r3, r3, #3
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	6363      	str	r3, [r4, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000edc:	6a29      	ldr	r1, [r5, #32]
 8000ede:	2900      	cmp	r1, #0
 8000ee0:	d000      	beq.n	8000ee4 <HAL_RCC_OscConfig+0x68>
 8000ee2:	e159      	b.n	8001198 <HAL_RCC_OscConfig+0x31c>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000ee4:	2000      	movs	r0, #0
 8000ee6:	e013      	b.n	8000f10 <HAL_RCC_OscConfig+0x94>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000ee8:	210c      	movs	r1, #12
 8000eea:	4ca5      	ldr	r4, [pc, #660]	; (8001180 <HAL_RCC_OscConfig+0x304>)
 8000eec:	6862      	ldr	r2, [r4, #4]
 8000eee:	400a      	ands	r2, r1
 8000ef0:	2a04      	cmp	r2, #4
 8000ef2:	d006      	beq.n	8000f02 <HAL_RCC_OscConfig+0x86>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ef4:	6863      	ldr	r3, [r4, #4]
 8000ef6:	400b      	ands	r3, r1
 8000ef8:	2b08      	cmp	r3, #8
 8000efa:	d10b      	bne.n	8000f14 <HAL_RCC_OscConfig+0x98>
 8000efc:	6863      	ldr	r3, [r4, #4]
 8000efe:	03db      	lsls	r3, r3, #15
 8000f00:	d508      	bpl.n	8000f14 <HAL_RCC_OscConfig+0x98>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f02:	6823      	ldr	r3, [r4, #0]
 8000f04:	039b      	lsls	r3, r3, #14
 8000f06:	d5bf      	bpl.n	8000e88 <HAL_RCC_OscConfig+0xc>
 8000f08:	686b      	ldr	r3, [r5, #4]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d1bc      	bne.n	8000e88 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000f0e:	2001      	movs	r0, #1
}
 8000f10:	b005      	add	sp, #20
 8000f12:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f14:	686b      	ldr	r3, [r5, #4]
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d113      	bne.n	8000f42 <HAL_RCC_OscConfig+0xc6>
 8000f1a:	2380      	movs	r3, #128	; 0x80
 8000f1c:	6822      	ldr	r2, [r4, #0]
 8000f1e:	025b      	lsls	r3, r3, #9
 8000f20:	4313      	orrs	r3, r2
 8000f22:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000f24:	f7ff fa9a 	bl	800045c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f28:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000f2a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f2c:	02b6      	lsls	r6, r6, #10
 8000f2e:	6823      	ldr	r3, [r4, #0]
 8000f30:	4233      	tst	r3, r6
 8000f32:	d1a9      	bne.n	8000e88 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f34:	f7ff fa92 	bl	800045c <HAL_GetTick>
 8000f38:	1bc0      	subs	r0, r0, r7
 8000f3a:	2864      	cmp	r0, #100	; 0x64
 8000f3c:	d9f7      	bls.n	8000f2e <HAL_RCC_OscConfig+0xb2>
            return HAL_TIMEOUT;
 8000f3e:	2003      	movs	r0, #3
 8000f40:	e7e6      	b.n	8000f10 <HAL_RCC_OscConfig+0x94>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d116      	bne.n	8000f74 <HAL_RCC_OscConfig+0xf8>
 8000f46:	6823      	ldr	r3, [r4, #0]
 8000f48:	4a8e      	ldr	r2, [pc, #568]	; (8001184 <HAL_RCC_OscConfig+0x308>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f4a:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	6023      	str	r3, [r4, #0]
 8000f50:	6823      	ldr	r3, [r4, #0]
 8000f52:	4a8d      	ldr	r2, [pc, #564]	; (8001188 <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f54:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f56:	4013      	ands	r3, r2
 8000f58:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000f5a:	f7ff fa7f 	bl	800045c <HAL_GetTick>
 8000f5e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f60:	6823      	ldr	r3, [r4, #0]
 8000f62:	4233      	tst	r3, r6
 8000f64:	d100      	bne.n	8000f68 <HAL_RCC_OscConfig+0xec>
 8000f66:	e78f      	b.n	8000e88 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f68:	f7ff fa78 	bl	800045c <HAL_GetTick>
 8000f6c:	1bc0      	subs	r0, r0, r7
 8000f6e:	2864      	cmp	r0, #100	; 0x64
 8000f70:	d9f6      	bls.n	8000f60 <HAL_RCC_OscConfig+0xe4>
 8000f72:	e7e4      	b.n	8000f3e <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f74:	2b05      	cmp	r3, #5
 8000f76:	d105      	bne.n	8000f84 <HAL_RCC_OscConfig+0x108>
 8000f78:	2380      	movs	r3, #128	; 0x80
 8000f7a:	6822      	ldr	r2, [r4, #0]
 8000f7c:	02db      	lsls	r3, r3, #11
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	6023      	str	r3, [r4, #0]
 8000f82:	e7ca      	b.n	8000f1a <HAL_RCC_OscConfig+0x9e>
 8000f84:	6823      	ldr	r3, [r4, #0]
 8000f86:	4a7f      	ldr	r2, [pc, #508]	; (8001184 <HAL_RCC_OscConfig+0x308>)
 8000f88:	4013      	ands	r3, r2
 8000f8a:	6023      	str	r3, [r4, #0]
 8000f8c:	6823      	ldr	r3, [r4, #0]
 8000f8e:	4a7e      	ldr	r2, [pc, #504]	; (8001188 <HAL_RCC_OscConfig+0x30c>)
 8000f90:	4013      	ands	r3, r2
 8000f92:	e7c6      	b.n	8000f22 <HAL_RCC_OscConfig+0xa6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f94:	220c      	movs	r2, #12
 8000f96:	4c7a      	ldr	r4, [pc, #488]	; (8001180 <HAL_RCC_OscConfig+0x304>)
 8000f98:	6863      	ldr	r3, [r4, #4]
 8000f9a:	4213      	tst	r3, r2
 8000f9c:	d006      	beq.n	8000fac <HAL_RCC_OscConfig+0x130>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000f9e:	6863      	ldr	r3, [r4, #4]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	2b08      	cmp	r3, #8
 8000fa4:	d110      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x14c>
 8000fa6:	6863      	ldr	r3, [r4, #4]
 8000fa8:	03db      	lsls	r3, r3, #15
 8000faa:	d40d      	bmi.n	8000fc8 <HAL_RCC_OscConfig+0x14c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fac:	6823      	ldr	r3, [r4, #0]
 8000fae:	079b      	lsls	r3, r3, #30
 8000fb0:	d502      	bpl.n	8000fb8 <HAL_RCC_OscConfig+0x13c>
 8000fb2:	68eb      	ldr	r3, [r5, #12]
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d1aa      	bne.n	8000f0e <HAL_RCC_OscConfig+0x92>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fb8:	21f8      	movs	r1, #248	; 0xf8
 8000fba:	6822      	ldr	r2, [r4, #0]
 8000fbc:	692b      	ldr	r3, [r5, #16]
 8000fbe:	438a      	bics	r2, r1
 8000fc0:	00db      	lsls	r3, r3, #3
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	6023      	str	r3, [r4, #0]
 8000fc6:	e763      	b.n	8000e90 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fc8:	68ea      	ldr	r2, [r5, #12]
 8000fca:	2301      	movs	r3, #1
 8000fcc:	2a00      	cmp	r2, #0
 8000fce:	d00f      	beq.n	8000ff0 <HAL_RCC_OscConfig+0x174>
        __HAL_RCC_HSI_ENABLE();
 8000fd0:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fd2:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000fd8:	f7ff fa40 	bl	800045c <HAL_GetTick>
 8000fdc:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fde:	6823      	ldr	r3, [r4, #0]
 8000fe0:	4233      	tst	r3, r6
 8000fe2:	d1e9      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x13c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fe4:	f7ff fa3a 	bl	800045c <HAL_GetTick>
 8000fe8:	1bc0      	subs	r0, r0, r7
 8000fea:	2802      	cmp	r0, #2
 8000fec:	d9f7      	bls.n	8000fde <HAL_RCC_OscConfig+0x162>
 8000fee:	e7a6      	b.n	8000f3e <HAL_RCC_OscConfig+0xc2>
        __HAL_RCC_HSI_DISABLE();
 8000ff0:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ff2:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 8000ff4:	439a      	bics	r2, r3
 8000ff6:	6022      	str	r2, [r4, #0]
        tickstart = HAL_GetTick();
 8000ff8:	f7ff fa30 	bl	800045c <HAL_GetTick>
 8000ffc:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ffe:	6823      	ldr	r3, [r4, #0]
 8001000:	4233      	tst	r3, r6
 8001002:	d100      	bne.n	8001006 <HAL_RCC_OscConfig+0x18a>
 8001004:	e744      	b.n	8000e90 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001006:	f7ff fa29 	bl	800045c <HAL_GetTick>
 800100a:	1bc0      	subs	r0, r0, r7
 800100c:	2802      	cmp	r0, #2
 800100e:	d9f6      	bls.n	8000ffe <HAL_RCC_OscConfig+0x182>
 8001010:	e795      	b.n	8000f3e <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001012:	69ea      	ldr	r2, [r5, #28]
 8001014:	2301      	movs	r3, #1
 8001016:	4c5a      	ldr	r4, [pc, #360]	; (8001180 <HAL_RCC_OscConfig+0x304>)
 8001018:	2a00      	cmp	r2, #0
 800101a:	d010      	beq.n	800103e <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_ENABLE();
 800101c:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800101e:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 8001020:	4313      	orrs	r3, r2
 8001022:	6263      	str	r3, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 8001024:	f7ff fa1a 	bl	800045c <HAL_GetTick>
 8001028:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800102a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800102c:	4233      	tst	r3, r6
 800102e:	d000      	beq.n	8001032 <HAL_RCC_OscConfig+0x1b6>
 8001030:	e732      	b.n	8000e98 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001032:	f7ff fa13 	bl	800045c <HAL_GetTick>
 8001036:	1bc0      	subs	r0, r0, r7
 8001038:	2802      	cmp	r0, #2
 800103a:	d9f6      	bls.n	800102a <HAL_RCC_OscConfig+0x1ae>
 800103c:	e77f      	b.n	8000f3e <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_LSI_DISABLE();
 800103e:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001040:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 8001042:	439a      	bics	r2, r3
 8001044:	6262      	str	r2, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 8001046:	f7ff fa09 	bl	800045c <HAL_GetTick>
 800104a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800104c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800104e:	4233      	tst	r3, r6
 8001050:	d100      	bne.n	8001054 <HAL_RCC_OscConfig+0x1d8>
 8001052:	e721      	b.n	8000e98 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001054:	f7ff fa02 	bl	800045c <HAL_GetTick>
 8001058:	1bc0      	subs	r0, r0, r7
 800105a:	2802      	cmp	r0, #2
 800105c:	d9f6      	bls.n	800104c <HAL_RCC_OscConfig+0x1d0>
 800105e:	e76e      	b.n	8000f3e <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001060:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001062:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001064:	4c46      	ldr	r4, [pc, #280]	; (8001180 <HAL_RCC_OscConfig+0x304>)
 8001066:	0552      	lsls	r2, r2, #21
 8001068:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 800106a:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800106c:	4213      	tst	r3, r2
 800106e:	d108      	bne.n	8001082 <HAL_RCC_OscConfig+0x206>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001070:	69e3      	ldr	r3, [r4, #28]
 8001072:	4313      	orrs	r3, r2
 8001074:	61e3      	str	r3, [r4, #28]
 8001076:	69e3      	ldr	r3, [r4, #28]
 8001078:	4013      	ands	r3, r2
 800107a:	9303      	str	r3, [sp, #12]
 800107c:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 800107e:	2301      	movs	r3, #1
 8001080:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001082:	2780      	movs	r7, #128	; 0x80
 8001084:	4e41      	ldr	r6, [pc, #260]	; (800118c <HAL_RCC_OscConfig+0x310>)
 8001086:	007f      	lsls	r7, r7, #1
 8001088:	6833      	ldr	r3, [r6, #0]
 800108a:	423b      	tst	r3, r7
 800108c:	d006      	beq.n	800109c <HAL_RCC_OscConfig+0x220>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800108e:	68ab      	ldr	r3, [r5, #8]
 8001090:	2b01      	cmp	r3, #1
 8001092:	d113      	bne.n	80010bc <HAL_RCC_OscConfig+0x240>
 8001094:	6a22      	ldr	r2, [r4, #32]
 8001096:	4313      	orrs	r3, r2
 8001098:	6223      	str	r3, [r4, #32]
 800109a:	e030      	b.n	80010fe <HAL_RCC_OscConfig+0x282>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800109c:	6833      	ldr	r3, [r6, #0]
 800109e:	433b      	orrs	r3, r7
 80010a0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80010a2:	f7ff f9db 	bl	800045c <HAL_GetTick>
 80010a6:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010a8:	6833      	ldr	r3, [r6, #0]
 80010aa:	423b      	tst	r3, r7
 80010ac:	d1ef      	bne.n	800108e <HAL_RCC_OscConfig+0x212>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010ae:	f7ff f9d5 	bl	800045c <HAL_GetTick>
 80010b2:	9b01      	ldr	r3, [sp, #4]
 80010b4:	1ac0      	subs	r0, r0, r3
 80010b6:	2864      	cmp	r0, #100	; 0x64
 80010b8:	d9f6      	bls.n	80010a8 <HAL_RCC_OscConfig+0x22c>
 80010ba:	e740      	b.n	8000f3e <HAL_RCC_OscConfig+0xc2>
 80010bc:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d114      	bne.n	80010ec <HAL_RCC_OscConfig+0x270>
 80010c2:	6a23      	ldr	r3, [r4, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010c4:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010c6:	4393      	bics	r3, r2
 80010c8:	6223      	str	r3, [r4, #32]
 80010ca:	6a23      	ldr	r3, [r4, #32]
 80010cc:	3203      	adds	r2, #3
 80010ce:	4393      	bics	r3, r2
 80010d0:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80010d2:	f7ff f9c3 	bl	800045c <HAL_GetTick>
 80010d6:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010d8:	6a23      	ldr	r3, [r4, #32]
 80010da:	423b      	tst	r3, r7
 80010dc:	d025      	beq.n	800112a <HAL_RCC_OscConfig+0x2ae>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010de:	f7ff f9bd 	bl	800045c <HAL_GetTick>
 80010e2:	4b2b      	ldr	r3, [pc, #172]	; (8001190 <HAL_RCC_OscConfig+0x314>)
 80010e4:	1b80      	subs	r0, r0, r6
 80010e6:	4298      	cmp	r0, r3
 80010e8:	d9f6      	bls.n	80010d8 <HAL_RCC_OscConfig+0x25c>
 80010ea:	e728      	b.n	8000f3e <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010ec:	2b05      	cmp	r3, #5
 80010ee:	d10b      	bne.n	8001108 <HAL_RCC_OscConfig+0x28c>
 80010f0:	6a21      	ldr	r1, [r4, #32]
 80010f2:	3b01      	subs	r3, #1
 80010f4:	430b      	orrs	r3, r1
 80010f6:	6223      	str	r3, [r4, #32]
 80010f8:	6a23      	ldr	r3, [r4, #32]
 80010fa:	431a      	orrs	r2, r3
 80010fc:	6222      	str	r2, [r4, #32]
      tickstart = HAL_GetTick();
 80010fe:	f7ff f9ad 	bl	800045c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001102:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8001104:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001106:	e00d      	b.n	8001124 <HAL_RCC_OscConfig+0x2a8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001108:	6a23      	ldr	r3, [r4, #32]
 800110a:	4393      	bics	r3, r2
 800110c:	2204      	movs	r2, #4
 800110e:	6223      	str	r3, [r4, #32]
 8001110:	6a23      	ldr	r3, [r4, #32]
 8001112:	4393      	bics	r3, r2
 8001114:	e7c0      	b.n	8001098 <HAL_RCC_OscConfig+0x21c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001116:	f7ff f9a1 	bl	800045c <HAL_GetTick>
 800111a:	4b1d      	ldr	r3, [pc, #116]	; (8001190 <HAL_RCC_OscConfig+0x314>)
 800111c:	1b80      	subs	r0, r0, r6
 800111e:	4298      	cmp	r0, r3
 8001120:	d900      	bls.n	8001124 <HAL_RCC_OscConfig+0x2a8>
 8001122:	e70c      	b.n	8000f3e <HAL_RCC_OscConfig+0xc2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001124:	6a23      	ldr	r3, [r4, #32]
 8001126:	423b      	tst	r3, r7
 8001128:	d0f5      	beq.n	8001116 <HAL_RCC_OscConfig+0x29a>
    if(pwrclkchanged == SET)
 800112a:	9b00      	ldr	r3, [sp, #0]
 800112c:	2b01      	cmp	r3, #1
 800112e:	d000      	beq.n	8001132 <HAL_RCC_OscConfig+0x2b6>
 8001130:	e6b6      	b.n	8000ea0 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001132:	69e3      	ldr	r3, [r4, #28]
 8001134:	4a17      	ldr	r2, [pc, #92]	; (8001194 <HAL_RCC_OscConfig+0x318>)
 8001136:	4013      	ands	r3, r2
 8001138:	61e3      	str	r3, [r4, #28]
 800113a:	e6b1      	b.n	8000ea0 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800113c:	f7ff f98e 	bl	800045c <HAL_GetTick>
 8001140:	1bc0      	subs	r0, r0, r7
 8001142:	2802      	cmp	r0, #2
 8001144:	d800      	bhi.n	8001148 <HAL_RCC_OscConfig+0x2cc>
 8001146:	e6be      	b.n	8000ec6 <HAL_RCC_OscConfig+0x4a>
 8001148:	e6f9      	b.n	8000f3e <HAL_RCC_OscConfig+0xc2>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800114a:	3205      	adds	r2, #5
 800114c:	d103      	bne.n	8001156 <HAL_RCC_OscConfig+0x2da>
      __HAL_RCC_HSI14ADC_ENABLE();
 800114e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001150:	439a      	bics	r2, r3
 8001152:	6362      	str	r2, [r4, #52]	; 0x34
 8001154:	e6bb      	b.n	8000ece <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001156:	6b62      	ldr	r2, [r4, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001158:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 800115a:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 800115c:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 800115e:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8001160:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001162:	4393      	bics	r3, r2
 8001164:	6363      	str	r3, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001166:	f7ff f979 	bl	800045c <HAL_GetTick>
 800116a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800116c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800116e:	4233      	tst	r3, r6
 8001170:	d100      	bne.n	8001174 <HAL_RCC_OscConfig+0x2f8>
 8001172:	e6b3      	b.n	8000edc <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001174:	f7ff f972 	bl	800045c <HAL_GetTick>
 8001178:	1bc0      	subs	r0, r0, r7
 800117a:	2802      	cmp	r0, #2
 800117c:	d9f6      	bls.n	800116c <HAL_RCC_OscConfig+0x2f0>
 800117e:	e6de      	b.n	8000f3e <HAL_RCC_OscConfig+0xc2>
 8001180:	40021000 	.word	0x40021000
 8001184:	fffeffff 	.word	0xfffeffff
 8001188:	fffbffff 	.word	0xfffbffff
 800118c:	40007000 	.word	0x40007000
 8001190:	00001388 	.word	0x00001388
 8001194:	efffffff 	.word	0xefffffff
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001198:	220c      	movs	r2, #12
 800119a:	4c26      	ldr	r4, [pc, #152]	; (8001234 <HAL_RCC_OscConfig+0x3b8>)
      return HAL_ERROR;
 800119c:	2001      	movs	r0, #1
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800119e:	6863      	ldr	r3, [r4, #4]
 80011a0:	4013      	ands	r3, r2
 80011a2:	2b08      	cmp	r3, #8
 80011a4:	d100      	bne.n	80011a8 <HAL_RCC_OscConfig+0x32c>
 80011a6:	e6b3      	b.n	8000f10 <HAL_RCC_OscConfig+0x94>
        __HAL_RCC_PLL_DISABLE();
 80011a8:	6823      	ldr	r3, [r4, #0]
 80011aa:	4a23      	ldr	r2, [pc, #140]	; (8001238 <HAL_RCC_OscConfig+0x3bc>)
 80011ac:	4013      	ands	r3, r2
 80011ae:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011b0:	2902      	cmp	r1, #2
 80011b2:	d12f      	bne.n	8001214 <HAL_RCC_OscConfig+0x398>
        tickstart = HAL_GetTick();
 80011b4:	f7ff f952 	bl	800045c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011b8:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80011ba:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011bc:	04b6      	lsls	r6, r6, #18
 80011be:	6823      	ldr	r3, [r4, #0]
 80011c0:	4233      	tst	r3, r6
 80011c2:	d121      	bne.n	8001208 <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011c4:	220f      	movs	r2, #15
 80011c6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80011c8:	4393      	bics	r3, r2
 80011ca:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80011cc:	4313      	orrs	r3, r2
 80011ce:	62e3      	str	r3, [r4, #44]	; 0x2c
 80011d0:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80011d2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80011d4:	6862      	ldr	r2, [r4, #4]
 80011d6:	430b      	orrs	r3, r1
 80011d8:	4918      	ldr	r1, [pc, #96]	; (800123c <HAL_RCC_OscConfig+0x3c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011da:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011dc:	400a      	ands	r2, r1
 80011de:	4313      	orrs	r3, r2
 80011e0:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80011e2:	2380      	movs	r3, #128	; 0x80
 80011e4:	6822      	ldr	r2, [r4, #0]
 80011e6:	045b      	lsls	r3, r3, #17
 80011e8:	4313      	orrs	r3, r2
 80011ea:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80011ec:	f7ff f936 	bl	800045c <HAL_GetTick>
 80011f0:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011f2:	04ad      	lsls	r5, r5, #18
 80011f4:	6823      	ldr	r3, [r4, #0]
 80011f6:	422b      	tst	r3, r5
 80011f8:	d000      	beq.n	80011fc <HAL_RCC_OscConfig+0x380>
 80011fa:	e673      	b.n	8000ee4 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011fc:	f7ff f92e 	bl	800045c <HAL_GetTick>
 8001200:	1b80      	subs	r0, r0, r6
 8001202:	2802      	cmp	r0, #2
 8001204:	d9f6      	bls.n	80011f4 <HAL_RCC_OscConfig+0x378>
 8001206:	e69a      	b.n	8000f3e <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001208:	f7ff f928 	bl	800045c <HAL_GetTick>
 800120c:	1bc0      	subs	r0, r0, r7
 800120e:	2802      	cmp	r0, #2
 8001210:	d9d5      	bls.n	80011be <HAL_RCC_OscConfig+0x342>
 8001212:	e694      	b.n	8000f3e <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8001214:	f7ff f922 	bl	800045c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001218:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 800121a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800121c:	04ad      	lsls	r5, r5, #18
 800121e:	6823      	ldr	r3, [r4, #0]
 8001220:	422b      	tst	r3, r5
 8001222:	d100      	bne.n	8001226 <HAL_RCC_OscConfig+0x3aa>
 8001224:	e65e      	b.n	8000ee4 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001226:	f7ff f919 	bl	800045c <HAL_GetTick>
 800122a:	1b80      	subs	r0, r0, r6
 800122c:	2802      	cmp	r0, #2
 800122e:	d9f6      	bls.n	800121e <HAL_RCC_OscConfig+0x3a2>
 8001230:	e685      	b.n	8000f3e <HAL_RCC_OscConfig+0xc2>
 8001232:	46c0      	nop			; (mov r8, r8)
 8001234:	40021000 	.word	0x40021000
 8001238:	feffffff 	.word	0xfeffffff
 800123c:	ffc2ffff 	.word	0xffc2ffff

08001240 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001240:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001242:	4c14      	ldr	r4, [pc, #80]	; (8001294 <HAL_RCC_GetSysClockFreq+0x54>)
{
 8001244:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001246:	2210      	movs	r2, #16
 8001248:	0021      	movs	r1, r4
 800124a:	4668      	mov	r0, sp
 800124c:	f001 f912 	bl	8002474 <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001250:	0021      	movs	r1, r4
 8001252:	ad04      	add	r5, sp, #16
 8001254:	2210      	movs	r2, #16
 8001256:	3110      	adds	r1, #16
 8001258:	0028      	movs	r0, r5
 800125a:	f001 f90b 	bl	8002474 <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800125e:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8001260:	4e0d      	ldr	r6, [pc, #52]	; (8001298 <HAL_RCC_GetSysClockFreq+0x58>)
 8001262:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001264:	401a      	ands	r2, r3
 8001266:	2a08      	cmp	r2, #8
 8001268:	d111      	bne.n	800128e <HAL_RCC_GetSysClockFreq+0x4e>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800126a:	200f      	movs	r0, #15
 800126c:	466a      	mov	r2, sp
 800126e:	0c99      	lsrs	r1, r3, #18
 8001270:	4001      	ands	r1, r0
 8001272:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001274:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8001276:	4002      	ands	r2, r0
 8001278:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800127a:	03db      	lsls	r3, r3, #15
 800127c:	d505      	bpl.n	800128a <HAL_RCC_GetSysClockFreq+0x4a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 800127e:	4807      	ldr	r0, [pc, #28]	; (800129c <HAL_RCC_GetSysClockFreq+0x5c>)
 8001280:	f7fe ff4c 	bl	800011c <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8001284:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001286:	b008      	add	sp, #32
 8001288:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 800128a:	4805      	ldr	r0, [pc, #20]	; (80012a0 <HAL_RCC_GetSysClockFreq+0x60>)
 800128c:	e7fa      	b.n	8001284 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSE_VALUE;
 800128e:	4803      	ldr	r0, [pc, #12]	; (800129c <HAL_RCC_GetSysClockFreq+0x5c>)
  return sysclockfreq;
 8001290:	e7f9      	b.n	8001286 <HAL_RCC_GetSysClockFreq+0x46>
 8001292:	46c0      	nop			; (mov r8, r8)
 8001294:	080024a0 	.word	0x080024a0
 8001298:	40021000 	.word	0x40021000
 800129c:	007a1200 	.word	0x007a1200
 80012a0:	003d0900 	.word	0x003d0900

080012a4 <HAL_RCC_ClockConfig>:
{
 80012a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80012a6:	2201      	movs	r2, #1
 80012a8:	4c43      	ldr	r4, [pc, #268]	; (80013b8 <HAL_RCC_ClockConfig+0x114>)
{
 80012aa:	0006      	movs	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80012ac:	6823      	ldr	r3, [r4, #0]
{
 80012ae:	000f      	movs	r7, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80012b0:	4013      	ands	r3, r2
 80012b2:	428b      	cmp	r3, r1
 80012b4:	d31c      	bcc.n	80012f0 <HAL_RCC_ClockConfig+0x4c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012b6:	6832      	ldr	r2, [r6, #0]
 80012b8:	0793      	lsls	r3, r2, #30
 80012ba:	d423      	bmi.n	8001304 <HAL_RCC_ClockConfig+0x60>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012bc:	07d3      	lsls	r3, r2, #31
 80012be:	d429      	bmi.n	8001314 <HAL_RCC_ClockConfig+0x70>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80012c0:	2301      	movs	r3, #1
 80012c2:	6822      	ldr	r2, [r4, #0]
 80012c4:	401a      	ands	r2, r3
 80012c6:	4297      	cmp	r7, r2
 80012c8:	d367      	bcc.n	800139a <HAL_RCC_ClockConfig+0xf6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012ca:	6833      	ldr	r3, [r6, #0]
 80012cc:	4c3b      	ldr	r4, [pc, #236]	; (80013bc <HAL_RCC_ClockConfig+0x118>)
 80012ce:	075b      	lsls	r3, r3, #29
 80012d0:	d46a      	bmi.n	80013a8 <HAL_RCC_ClockConfig+0x104>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80012d2:	f7ff ffb5 	bl	8001240 <HAL_RCC_GetSysClockFreq>
 80012d6:	6863      	ldr	r3, [r4, #4]
 80012d8:	4a39      	ldr	r2, [pc, #228]	; (80013c0 <HAL_RCC_ClockConfig+0x11c>)
 80012da:	061b      	lsls	r3, r3, #24
 80012dc:	0f1b      	lsrs	r3, r3, #28
 80012de:	5cd3      	ldrb	r3, [r2, r3]
 80012e0:	40d8      	lsrs	r0, r3
 80012e2:	4b38      	ldr	r3, [pc, #224]	; (80013c4 <HAL_RCC_ClockConfig+0x120>)
 80012e4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80012e6:	2000      	movs	r0, #0
 80012e8:	f7ff f88e 	bl	8000408 <HAL_InitTick>
  return HAL_OK;
 80012ec:	2000      	movs	r0, #0
 80012ee:	e008      	b.n	8001302 <HAL_RCC_ClockConfig+0x5e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012f0:	6823      	ldr	r3, [r4, #0]
 80012f2:	4393      	bics	r3, r2
 80012f4:	430b      	orrs	r3, r1
 80012f6:	6023      	str	r3, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80012f8:	6823      	ldr	r3, [r4, #0]
 80012fa:	4013      	ands	r3, r2
 80012fc:	4299      	cmp	r1, r3
 80012fe:	d0da      	beq.n	80012b6 <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 8001300:	2001      	movs	r0, #1
}
 8001302:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001304:	20f0      	movs	r0, #240	; 0xf0
 8001306:	492d      	ldr	r1, [pc, #180]	; (80013bc <HAL_RCC_ClockConfig+0x118>)
 8001308:	684b      	ldr	r3, [r1, #4]
 800130a:	4383      	bics	r3, r0
 800130c:	68b0      	ldr	r0, [r6, #8]
 800130e:	4303      	orrs	r3, r0
 8001310:	604b      	str	r3, [r1, #4]
 8001312:	e7d3      	b.n	80012bc <HAL_RCC_ClockConfig+0x18>
 8001314:	4d29      	ldr	r5, [pc, #164]	; (80013bc <HAL_RCC_ClockConfig+0x118>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001316:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001318:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800131a:	2a01      	cmp	r2, #1
 800131c:	d11a      	bne.n	8001354 <HAL_RCC_ClockConfig+0xb0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800131e:	039b      	lsls	r3, r3, #14
 8001320:	d5ee      	bpl.n	8001300 <HAL_RCC_ClockConfig+0x5c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001322:	2103      	movs	r1, #3
 8001324:	686b      	ldr	r3, [r5, #4]
 8001326:	438b      	bics	r3, r1
 8001328:	4313      	orrs	r3, r2
 800132a:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 800132c:	f7ff f896 	bl	800045c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001330:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001332:	9001      	str	r0, [sp, #4]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001334:	2b01      	cmp	r3, #1
 8001336:	d115      	bne.n	8001364 <HAL_RCC_ClockConfig+0xc0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001338:	220c      	movs	r2, #12
 800133a:	686b      	ldr	r3, [r5, #4]
 800133c:	4013      	ands	r3, r2
 800133e:	2b04      	cmp	r3, #4
 8001340:	d0be      	beq.n	80012c0 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001342:	f7ff f88b 	bl	800045c <HAL_GetTick>
 8001346:	9b01      	ldr	r3, [sp, #4]
 8001348:	1ac0      	subs	r0, r0, r3
 800134a:	4b1f      	ldr	r3, [pc, #124]	; (80013c8 <HAL_RCC_ClockConfig+0x124>)
 800134c:	4298      	cmp	r0, r3
 800134e:	d9f3      	bls.n	8001338 <HAL_RCC_ClockConfig+0x94>
          return HAL_TIMEOUT;
 8001350:	2003      	movs	r0, #3
 8001352:	e7d6      	b.n	8001302 <HAL_RCC_ClockConfig+0x5e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001354:	2a02      	cmp	r2, #2
 8001356:	d102      	bne.n	800135e <HAL_RCC_ClockConfig+0xba>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001358:	019b      	lsls	r3, r3, #6
 800135a:	d4e2      	bmi.n	8001322 <HAL_RCC_ClockConfig+0x7e>
 800135c:	e7d0      	b.n	8001300 <HAL_RCC_ClockConfig+0x5c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800135e:	079b      	lsls	r3, r3, #30
 8001360:	d4df      	bmi.n	8001322 <HAL_RCC_ClockConfig+0x7e>
 8001362:	e7cd      	b.n	8001300 <HAL_RCC_ClockConfig+0x5c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001364:	2b02      	cmp	r3, #2
 8001366:	d012      	beq.n	800138e <HAL_RCC_ClockConfig+0xea>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001368:	220c      	movs	r2, #12
 800136a:	686b      	ldr	r3, [r5, #4]
 800136c:	4213      	tst	r3, r2
 800136e:	d0a7      	beq.n	80012c0 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001370:	f7ff f874 	bl	800045c <HAL_GetTick>
 8001374:	9b01      	ldr	r3, [sp, #4]
 8001376:	1ac0      	subs	r0, r0, r3
 8001378:	4b13      	ldr	r3, [pc, #76]	; (80013c8 <HAL_RCC_ClockConfig+0x124>)
 800137a:	4298      	cmp	r0, r3
 800137c:	d9f4      	bls.n	8001368 <HAL_RCC_ClockConfig+0xc4>
 800137e:	e7e7      	b.n	8001350 <HAL_RCC_ClockConfig+0xac>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001380:	f7ff f86c 	bl	800045c <HAL_GetTick>
 8001384:	9b01      	ldr	r3, [sp, #4]
 8001386:	1ac0      	subs	r0, r0, r3
 8001388:	4b0f      	ldr	r3, [pc, #60]	; (80013c8 <HAL_RCC_ClockConfig+0x124>)
 800138a:	4298      	cmp	r0, r3
 800138c:	d8e0      	bhi.n	8001350 <HAL_RCC_ClockConfig+0xac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800138e:	220c      	movs	r2, #12
 8001390:	686b      	ldr	r3, [r5, #4]
 8001392:	4013      	ands	r3, r2
 8001394:	2b08      	cmp	r3, #8
 8001396:	d1f3      	bne.n	8001380 <HAL_RCC_ClockConfig+0xdc>
 8001398:	e792      	b.n	80012c0 <HAL_RCC_ClockConfig+0x1c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800139a:	6822      	ldr	r2, [r4, #0]
 800139c:	439a      	bics	r2, r3
 800139e:	6022      	str	r2, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80013a0:	6822      	ldr	r2, [r4, #0]
 80013a2:	421a      	tst	r2, r3
 80013a4:	d1ac      	bne.n	8001300 <HAL_RCC_ClockConfig+0x5c>
 80013a6:	e790      	b.n	80012ca <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80013a8:	6863      	ldr	r3, [r4, #4]
 80013aa:	4a08      	ldr	r2, [pc, #32]	; (80013cc <HAL_RCC_ClockConfig+0x128>)
 80013ac:	4013      	ands	r3, r2
 80013ae:	68f2      	ldr	r2, [r6, #12]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	6063      	str	r3, [r4, #4]
 80013b4:	e78d      	b.n	80012d2 <HAL_RCC_ClockConfig+0x2e>
 80013b6:	46c0      	nop			; (mov r8, r8)
 80013b8:	40022000 	.word	0x40022000
 80013bc:	40021000 	.word	0x40021000
 80013c0:	080024df 	.word	0x080024df
 80013c4:	20000004 	.word	0x20000004
 80013c8:	00001388 	.word	0x00001388
 80013cc:	fffff8ff 	.word	0xfffff8ff

080013d0 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 80013d0:	4b01      	ldr	r3, [pc, #4]	; (80013d8 <HAL_RCC_GetHCLKFreq+0x8>)
 80013d2:	6818      	ldr	r0, [r3, #0]
}
 80013d4:	4770      	bx	lr
 80013d6:	46c0      	nop			; (mov r8, r8)
 80013d8:	20000004 	.word	0x20000004

080013dc <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80013dc:	4b04      	ldr	r3, [pc, #16]	; (80013f0 <HAL_RCC_GetPCLK1Freq+0x14>)
 80013de:	4a05      	ldr	r2, [pc, #20]	; (80013f4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	055b      	lsls	r3, r3, #21
 80013e4:	0f5b      	lsrs	r3, r3, #29
 80013e6:	5cd3      	ldrb	r3, [r2, r3]
 80013e8:	4a03      	ldr	r2, [pc, #12]	; (80013f8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80013ea:	6810      	ldr	r0, [r2, #0]
 80013ec:	40d8      	lsrs	r0, r3
}    
 80013ee:	4770      	bx	lr
 80013f0:	40021000 	.word	0x40021000
 80013f4:	080024ef 	.word	0x080024ef
 80013f8:	20000004 	.word	0x20000004

080013fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80013fc:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80013fe:	6803      	ldr	r3, [r0, #0]
{
 8001400:	b085      	sub	sp, #20
 8001402:	0005      	movs	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001404:	03db      	lsls	r3, r3, #15
 8001406:	d528      	bpl.n	800145a <HAL_RCCEx_PeriphCLKConfig+0x5e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001408:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 800140a:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800140c:	4c37      	ldr	r4, [pc, #220]	; (80014ec <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 800140e:	0552      	lsls	r2, r2, #21
 8001410:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8001412:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001414:	4213      	tst	r3, r2
 8001416:	d108      	bne.n	800142a <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001418:	69e3      	ldr	r3, [r4, #28]
 800141a:	4313      	orrs	r3, r2
 800141c:	61e3      	str	r3, [r4, #28]
 800141e:	69e3      	ldr	r3, [r4, #28]
 8001420:	4013      	ands	r3, r2
 8001422:	9303      	str	r3, [sp, #12]
 8001424:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8001426:	2301      	movs	r3, #1
 8001428:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800142a:	2780      	movs	r7, #128	; 0x80
 800142c:	4e30      	ldr	r6, [pc, #192]	; (80014f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 800142e:	007f      	lsls	r7, r7, #1
 8001430:	6833      	ldr	r3, [r6, #0]
 8001432:	423b      	tst	r3, r7
 8001434:	d026      	beq.n	8001484 <HAL_RCCEx_PeriphCLKConfig+0x88>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001436:	22c0      	movs	r2, #192	; 0xc0
 8001438:	6a23      	ldr	r3, [r4, #32]
 800143a:	0092      	lsls	r2, r2, #2
 800143c:	4013      	ands	r3, r2
 800143e:	4e2d      	ldr	r6, [pc, #180]	; (80014f4 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001440:	d132      	bne.n	80014a8 <HAL_RCCEx_PeriphCLKConfig+0xac>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001442:	6a23      	ldr	r3, [r4, #32]
 8001444:	401e      	ands	r6, r3
 8001446:	686b      	ldr	r3, [r5, #4]
 8001448:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800144a:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800144c:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 800144e:	2b01      	cmp	r3, #1
 8001450:	d103      	bne.n	800145a <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001452:	69e3      	ldr	r3, [r4, #28]
 8001454:	4a28      	ldr	r2, [pc, #160]	; (80014f8 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8001456:	4013      	ands	r3, r2
 8001458:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800145a:	682a      	ldr	r2, [r5, #0]
 800145c:	07d3      	lsls	r3, r2, #31
 800145e:	d506      	bpl.n	800146e <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001460:	2003      	movs	r0, #3
 8001462:	4922      	ldr	r1, [pc, #136]	; (80014ec <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 8001464:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001466:	4383      	bics	r3, r0
 8001468:	68a8      	ldr	r0, [r5, #8]
 800146a:	4303      	orrs	r3, r0
 800146c:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800146e:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001470:	0693      	lsls	r3, r2, #26
 8001472:	d517      	bpl.n	80014a4 <HAL_RCCEx_PeriphCLKConfig+0xa8>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001474:	2110      	movs	r1, #16
 8001476:	4a1d      	ldr	r2, [pc, #116]	; (80014ec <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 8001478:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800147a:	438b      	bics	r3, r1
 800147c:	68e9      	ldr	r1, [r5, #12]
 800147e:	430b      	orrs	r3, r1
 8001480:	6313      	str	r3, [r2, #48]	; 0x30
 8001482:	e00f      	b.n	80014a4 <HAL_RCCEx_PeriphCLKConfig+0xa8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001484:	6833      	ldr	r3, [r6, #0]
 8001486:	433b      	orrs	r3, r7
 8001488:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800148a:	f7fe ffe7 	bl	800045c <HAL_GetTick>
 800148e:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001490:	6833      	ldr	r3, [r6, #0]
 8001492:	423b      	tst	r3, r7
 8001494:	d1cf      	bne.n	8001436 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001496:	f7fe ffe1 	bl	800045c <HAL_GetTick>
 800149a:	9b01      	ldr	r3, [sp, #4]
 800149c:	1ac0      	subs	r0, r0, r3
 800149e:	2864      	cmp	r0, #100	; 0x64
 80014a0:	d9f6      	bls.n	8001490 <HAL_RCCEx_PeriphCLKConfig+0x94>
          return HAL_TIMEOUT;
 80014a2:	2003      	movs	r0, #3
}
 80014a4:	b005      	add	sp, #20
 80014a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80014a8:	6869      	ldr	r1, [r5, #4]
 80014aa:	400a      	ands	r2, r1
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d0c8      	beq.n	8001442 <HAL_RCCEx_PeriphCLKConfig+0x46>
      __HAL_RCC_BACKUPRESET_FORCE();
 80014b0:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80014b2:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80014b4:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80014b6:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 80014b8:	025b      	lsls	r3, r3, #9
 80014ba:	4303      	orrs	r3, r0
 80014bc:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80014be:	6a23      	ldr	r3, [r4, #32]
 80014c0:	480e      	ldr	r0, [pc, #56]	; (80014fc <HAL_RCCEx_PeriphCLKConfig+0x100>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80014c2:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 80014c4:	4003      	ands	r3, r0
 80014c6:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 80014c8:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80014ca:	07d3      	lsls	r3, r2, #31
 80014cc:	d5b9      	bpl.n	8001442 <HAL_RCCEx_PeriphCLKConfig+0x46>
        tickstart = HAL_GetTick();
 80014ce:	f7fe ffc5 	bl	800045c <HAL_GetTick>
 80014d2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014d4:	2202      	movs	r2, #2
 80014d6:	6a23      	ldr	r3, [r4, #32]
 80014d8:	4213      	tst	r3, r2
 80014da:	d1b2      	bne.n	8001442 <HAL_RCCEx_PeriphCLKConfig+0x46>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014dc:	f7fe ffbe 	bl	800045c <HAL_GetTick>
 80014e0:	4b07      	ldr	r3, [pc, #28]	; (8001500 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 80014e2:	1bc0      	subs	r0, r0, r7
 80014e4:	4298      	cmp	r0, r3
 80014e6:	d9f5      	bls.n	80014d4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 80014e8:	e7db      	b.n	80014a2 <HAL_RCCEx_PeriphCLKConfig+0xa6>
 80014ea:	46c0      	nop			; (mov r8, r8)
 80014ec:	40021000 	.word	0x40021000
 80014f0:	40007000 	.word	0x40007000
 80014f4:	fffffcff 	.word	0xfffffcff
 80014f8:	efffffff 	.word	0xefffffff
 80014fc:	fffeffff 	.word	0xfffeffff
 8001500:	00001388 	.word	0x00001388

08001504 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001504:	2201      	movs	r2, #1
 8001506:	6a03      	ldr	r3, [r0, #32]
{
 8001508:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800150a:	4393      	bics	r3, r2
 800150c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800150e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001510:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001512:	6985      	ldr	r5, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001514:	3272      	adds	r2, #114	; 0x72
 8001516:	4395      	bics	r5, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001518:	680a      	ldr	r2, [r1, #0]
 800151a:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800151c:	2202      	movs	r2, #2
 800151e:	4393      	bics	r3, r2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001520:	688a      	ldr	r2, [r1, #8]
 8001522:	4313      	orrs	r3, r2

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001524:	4a11      	ldr	r2, [pc, #68]	; (800156c <TIM_OC1_SetConfig+0x68>)
 8001526:	4290      	cmp	r0, r2
 8001528:	d005      	beq.n	8001536 <TIM_OC1_SetConfig+0x32>
 800152a:	4e11      	ldr	r6, [pc, #68]	; (8001570 <TIM_OC1_SetConfig+0x6c>)
 800152c:	42b0      	cmp	r0, r6
 800152e:	d002      	beq.n	8001536 <TIM_OC1_SetConfig+0x32>
 8001530:	4e10      	ldr	r6, [pc, #64]	; (8001574 <TIM_OC1_SetConfig+0x70>)
 8001532:	42b0      	cmp	r0, r6
 8001534:	d113      	bne.n	800155e <TIM_OC1_SetConfig+0x5a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001536:	2608      	movs	r6, #8
 8001538:	43b3      	bics	r3, r6
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800153a:	68ce      	ldr	r6, [r1, #12]
 800153c:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800153e:	2604      	movs	r6, #4
 8001540:	43b3      	bics	r3, r6
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001542:	4290      	cmp	r0, r2
 8001544:	d005      	beq.n	8001552 <TIM_OC1_SetConfig+0x4e>
 8001546:	4a0a      	ldr	r2, [pc, #40]	; (8001570 <TIM_OC1_SetConfig+0x6c>)
 8001548:	4290      	cmp	r0, r2
 800154a:	d002      	beq.n	8001552 <TIM_OC1_SetConfig+0x4e>
 800154c:	4a09      	ldr	r2, [pc, #36]	; (8001574 <TIM_OC1_SetConfig+0x70>)
 800154e:	4290      	cmp	r0, r2
 8001550:	d105      	bne.n	800155e <TIM_OC1_SetConfig+0x5a>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001552:	4a09      	ldr	r2, [pc, #36]	; (8001578 <TIM_OC1_SetConfig+0x74>)
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001554:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001556:	4022      	ands	r2, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001558:	694c      	ldr	r4, [r1, #20]
 800155a:	4334      	orrs	r4, r6
 800155c:	4314      	orrs	r4, r2

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800155e:	684a      	ldr	r2, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001560:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001562:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8001564:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001566:	6203      	str	r3, [r0, #32]
}
 8001568:	bd70      	pop	{r4, r5, r6, pc}
 800156a:	46c0      	nop			; (mov r8, r8)
 800156c:	40012c00 	.word	0x40012c00
 8001570:	40014400 	.word	0x40014400
 8001574:	40014800 	.word	0x40014800
 8001578:	fffffcff 	.word	0xfffffcff

0800157c <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800157c:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800157e:	2573      	movs	r5, #115	; 0x73
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001580:	6a03      	ldr	r3, [r0, #32]
 8001582:	4a16      	ldr	r2, [pc, #88]	; (80015dc <TIM_OC3_SetConfig+0x60>)
 8001584:	4013      	ands	r3, r2
 8001586:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001588:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800158a:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 800158c:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800158e:	43ac      	bics	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001590:	680d      	ldr	r5, [r1, #0]
 8001592:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001594:	4d12      	ldr	r5, [pc, #72]	; (80015e0 <TIM_OC3_SetConfig+0x64>)
 8001596:	402b      	ands	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001598:	688d      	ldr	r5, [r1, #8]
 800159a:	022d      	lsls	r5, r5, #8
 800159c:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800159e:	4d11      	ldr	r5, [pc, #68]	; (80015e4 <TIM_OC3_SetConfig+0x68>)
 80015a0:	42a8      	cmp	r0, r5
 80015a2:	d10e      	bne.n	80015c2 <TIM_OC3_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80015a4:	4d10      	ldr	r5, [pc, #64]	; (80015e8 <TIM_OC3_SetConfig+0x6c>)
 80015a6:	401d      	ands	r5, r3
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80015a8:	68cb      	ldr	r3, [r1, #12]
 80015aa:	021b      	lsls	r3, r3, #8
 80015ac:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80015ae:	4d0f      	ldr	r5, [pc, #60]	; (80015ec <TIM_OC3_SetConfig+0x70>)
 80015b0:	402b      	ands	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80015b2:	4d0f      	ldr	r5, [pc, #60]	; (80015f0 <TIM_OC3_SetConfig+0x74>)
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80015b4:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80015b6:	4015      	ands	r5, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80015b8:	698a      	ldr	r2, [r1, #24]
 80015ba:	4332      	orrs	r2, r6
 80015bc:	0112      	lsls	r2, r2, #4
 80015be:	432a      	orrs	r2, r5
 80015c0:	e005      	b.n	80015ce <TIM_OC3_SetConfig+0x52>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80015c2:	4d0c      	ldr	r5, [pc, #48]	; (80015f4 <TIM_OC3_SetConfig+0x78>)
 80015c4:	42a8      	cmp	r0, r5
 80015c6:	d0f4      	beq.n	80015b2 <TIM_OC3_SetConfig+0x36>
 80015c8:	4d0b      	ldr	r5, [pc, #44]	; (80015f8 <TIM_OC3_SetConfig+0x7c>)
 80015ca:	42a8      	cmp	r0, r5
 80015cc:	d0f1      	beq.n	80015b2 <TIM_OC3_SetConfig+0x36>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80015ce:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80015d0:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 80015d2:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80015d4:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80015d6:	6203      	str	r3, [r0, #32]
}
 80015d8:	bd70      	pop	{r4, r5, r6, pc}
 80015da:	46c0      	nop			; (mov r8, r8)
 80015dc:	fffffeff 	.word	0xfffffeff
 80015e0:	fffffdff 	.word	0xfffffdff
 80015e4:	40012c00 	.word	0x40012c00
 80015e8:	fffff7ff 	.word	0xfffff7ff
 80015ec:	fffffbff 	.word	0xfffffbff
 80015f0:	ffffcfff 	.word	0xffffcfff
 80015f4:	40014400 	.word	0x40014400
 80015f8:	40014800 	.word	0x40014800

080015fc <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80015fc:	6a03      	ldr	r3, [r0, #32]
 80015fe:	4a12      	ldr	r2, [pc, #72]	; (8001648 <TIM_OC4_SetConfig+0x4c>)
{
 8001600:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001602:	4013      	ands	r3, r2
 8001604:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001606:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001608:	4c10      	ldr	r4, [pc, #64]	; (800164c <TIM_OC4_SetConfig+0x50>)
  tmpcr2 =  TIMx->CR2;
 800160a:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 800160c:	69c5      	ldr	r5, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800160e:	4025      	ands	r5, r4

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001610:	680c      	ldr	r4, [r1, #0]
 8001612:	0224      	lsls	r4, r4, #8
 8001614:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001616:	4c0e      	ldr	r4, [pc, #56]	; (8001650 <TIM_OC4_SetConfig+0x54>)
 8001618:	4022      	ands	r2, r4
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800161a:	688c      	ldr	r4, [r1, #8]
 800161c:	0324      	lsls	r4, r4, #12
 800161e:	4322      	orrs	r2, r4

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001620:	4c0c      	ldr	r4, [pc, #48]	; (8001654 <TIM_OC4_SetConfig+0x58>)
 8001622:	42a0      	cmp	r0, r4
 8001624:	d005      	beq.n	8001632 <TIM_OC4_SetConfig+0x36>
 8001626:	4c0c      	ldr	r4, [pc, #48]	; (8001658 <TIM_OC4_SetConfig+0x5c>)
 8001628:	42a0      	cmp	r0, r4
 800162a:	d002      	beq.n	8001632 <TIM_OC4_SetConfig+0x36>
 800162c:	4c0b      	ldr	r4, [pc, #44]	; (800165c <TIM_OC4_SetConfig+0x60>)
 800162e:	42a0      	cmp	r0, r4
 8001630:	d104      	bne.n	800163c <TIM_OC4_SetConfig+0x40>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001632:	4c0b      	ldr	r4, [pc, #44]	; (8001660 <TIM_OC4_SetConfig+0x64>)
 8001634:	4023      	ands	r3, r4
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001636:	694c      	ldr	r4, [r1, #20]
 8001638:	01a4      	lsls	r4, r4, #6
 800163a:	4323      	orrs	r3, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800163c:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800163e:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001640:	61c5      	str	r5, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8001642:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001644:	6202      	str	r2, [r0, #32]
}
 8001646:	bd30      	pop	{r4, r5, pc}
 8001648:	ffffefff 	.word	0xffffefff
 800164c:	ffff8cff 	.word	0xffff8cff
 8001650:	ffffdfff 	.word	0xffffdfff
 8001654:	40012c00 	.word	0x40012c00
 8001658:	40014400 	.word	0x40014400
 800165c:	40014800 	.word	0x40014800
 8001660:	ffffbfff 	.word	0xffffbfff

08001664 <HAL_TIM_Base_Start>:
  htim->State= HAL_TIM_STATE_BUSY;
 8001664:	0002      	movs	r2, r0
 8001666:	2302      	movs	r3, #2
  __HAL_TIM_ENABLE(htim);
 8001668:	2101      	movs	r1, #1
 800166a:	6800      	ldr	r0, [r0, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 800166c:	323d      	adds	r2, #61	; 0x3d
 800166e:	7013      	strb	r3, [r2, #0]
  __HAL_TIM_ENABLE(htim);
 8001670:	6803      	ldr	r3, [r0, #0]
 8001672:	430b      	orrs	r3, r1
 8001674:	6003      	str	r3, [r0, #0]
}
 8001676:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001678:	7011      	strb	r1, [r2, #0]
}
 800167a:	4770      	bx	lr

0800167c <HAL_TIM_PWM_MspInit>:
 800167c:	4770      	bx	lr
	...

08001680 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001680:	4a19      	ldr	r2, [pc, #100]	; (80016e8 <TIM_Base_SetConfig+0x68>)
{
 8001682:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8001684:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001686:	4290      	cmp	r0, r2
 8001688:	d002      	beq.n	8001690 <TIM_Base_SetConfig+0x10>
 800168a:	4c18      	ldr	r4, [pc, #96]	; (80016ec <TIM_Base_SetConfig+0x6c>)
 800168c:	42a0      	cmp	r0, r4
 800168e:	d108      	bne.n	80016a2 <TIM_Base_SetConfig+0x22>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001690:	2470      	movs	r4, #112	; 0x70
 8001692:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 8001694:	684c      	ldr	r4, [r1, #4]
 8001696:	4323      	orrs	r3, r4
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001698:	4290      	cmp	r0, r2
 800169a:	d00b      	beq.n	80016b4 <TIM_Base_SetConfig+0x34>
 800169c:	4c13      	ldr	r4, [pc, #76]	; (80016ec <TIM_Base_SetConfig+0x6c>)
 800169e:	42a0      	cmp	r0, r4
 80016a0:	d008      	beq.n	80016b4 <TIM_Base_SetConfig+0x34>
 80016a2:	4c13      	ldr	r4, [pc, #76]	; (80016f0 <TIM_Base_SetConfig+0x70>)
 80016a4:	42a0      	cmp	r0, r4
 80016a6:	d005      	beq.n	80016b4 <TIM_Base_SetConfig+0x34>
 80016a8:	4c12      	ldr	r4, [pc, #72]	; (80016f4 <TIM_Base_SetConfig+0x74>)
 80016aa:	42a0      	cmp	r0, r4
 80016ac:	d002      	beq.n	80016b4 <TIM_Base_SetConfig+0x34>
 80016ae:	4c12      	ldr	r4, [pc, #72]	; (80016f8 <TIM_Base_SetConfig+0x78>)
 80016b0:	42a0      	cmp	r0, r4
 80016b2:	d103      	bne.n	80016bc <TIM_Base_SetConfig+0x3c>
    tmpcr1 &= ~TIM_CR1_CKD;
 80016b4:	4c11      	ldr	r4, [pc, #68]	; (80016fc <TIM_Base_SetConfig+0x7c>)
 80016b6:	4023      	ands	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80016b8:	68cc      	ldr	r4, [r1, #12]
 80016ba:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80016bc:	2480      	movs	r4, #128	; 0x80
 80016be:	43a3      	bics	r3, r4
 80016c0:	694c      	ldr	r4, [r1, #20]
 80016c2:	4323      	orrs	r3, r4
  TIMx->CR1 = tmpcr1;
 80016c4:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80016c6:	688b      	ldr	r3, [r1, #8]
 80016c8:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80016ca:	680b      	ldr	r3, [r1, #0]
 80016cc:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80016ce:	4290      	cmp	r0, r2
 80016d0:	d005      	beq.n	80016de <TIM_Base_SetConfig+0x5e>
 80016d2:	4b08      	ldr	r3, [pc, #32]	; (80016f4 <TIM_Base_SetConfig+0x74>)
 80016d4:	4298      	cmp	r0, r3
 80016d6:	d002      	beq.n	80016de <TIM_Base_SetConfig+0x5e>
 80016d8:	4b07      	ldr	r3, [pc, #28]	; (80016f8 <TIM_Base_SetConfig+0x78>)
 80016da:	4298      	cmp	r0, r3
 80016dc:	d101      	bne.n	80016e2 <TIM_Base_SetConfig+0x62>
    TIMx->RCR = Structure->RepetitionCounter;
 80016de:	690b      	ldr	r3, [r1, #16]
 80016e0:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80016e2:	2301      	movs	r3, #1
 80016e4:	6143      	str	r3, [r0, #20]
}
 80016e6:	bd10      	pop	{r4, pc}
 80016e8:	40012c00 	.word	0x40012c00
 80016ec:	40000400 	.word	0x40000400
 80016f0:	40002000 	.word	0x40002000
 80016f4:	40014400 	.word	0x40014400
 80016f8:	40014800 	.word	0x40014800
 80016fc:	fffffcff 	.word	0xfffffcff

08001700 <HAL_TIM_Base_Init>:
{
 8001700:	b570      	push	{r4, r5, r6, lr}
 8001702:	0004      	movs	r4, r0
    return HAL_ERROR;
 8001704:	2001      	movs	r0, #1
  if(htim == NULL)
 8001706:	2c00      	cmp	r4, #0
 8001708:	d014      	beq.n	8001734 <HAL_TIM_Base_Init+0x34>
  if(htim->State == HAL_TIM_STATE_RESET)
 800170a:	0025      	movs	r5, r4
 800170c:	353d      	adds	r5, #61	; 0x3d
 800170e:	782b      	ldrb	r3, [r5, #0]
 8001710:	b2db      	uxtb	r3, r3
 8001712:	2b00      	cmp	r3, #0
 8001714:	d105      	bne.n	8001722 <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8001716:	0022      	movs	r2, r4
 8001718:	323c      	adds	r2, #60	; 0x3c
 800171a:	7013      	strb	r3, [r2, #0]
    HAL_TIM_Base_MspInit(htim);
 800171c:	0020      	movs	r0, r4
 800171e:	f000 fdc1 	bl	80022a4 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001722:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001724:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001726:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001728:	1d21      	adds	r1, r4, #4
 800172a:	f7ff ffa9 	bl	8001680 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800172e:	2301      	movs	r3, #1
  return HAL_OK;
 8001730:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001732:	702b      	strb	r3, [r5, #0]
}
 8001734:	bd70      	pop	{r4, r5, r6, pc}

08001736 <HAL_TIM_PWM_Init>:
{
 8001736:	b570      	push	{r4, r5, r6, lr}
 8001738:	0004      	movs	r4, r0
    return HAL_ERROR;
 800173a:	2001      	movs	r0, #1
  if(htim == NULL)
 800173c:	2c00      	cmp	r4, #0
 800173e:	d014      	beq.n	800176a <HAL_TIM_PWM_Init+0x34>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001740:	0025      	movs	r5, r4
 8001742:	353d      	adds	r5, #61	; 0x3d
 8001744:	782b      	ldrb	r3, [r5, #0]
 8001746:	b2db      	uxtb	r3, r3
 8001748:	2b00      	cmp	r3, #0
 800174a:	d105      	bne.n	8001758 <HAL_TIM_PWM_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 800174c:	0022      	movs	r2, r4
 800174e:	323c      	adds	r2, #60	; 0x3c
 8001750:	7013      	strb	r3, [r2, #0]
    HAL_TIM_PWM_MspInit(htim);
 8001752:	0020      	movs	r0, r4
 8001754:	f7ff ff92 	bl	800167c <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001758:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800175a:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 800175c:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800175e:	1d21      	adds	r1, r4, #4
 8001760:	f7ff ff8e 	bl	8001680 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001764:	2301      	movs	r3, #1
  return HAL_OK;
 8001766:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001768:	702b      	strb	r3, [r5, #0]
}
 800176a:	bd70      	pop	{r4, r5, r6, pc}

0800176c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800176c:	2210      	movs	r2, #16
 800176e:	6a03      	ldr	r3, [r0, #32]
{
 8001770:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001772:	4393      	bics	r3, r2
 8001774:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001776:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001778:	4d15      	ldr	r5, [pc, #84]	; (80017d0 <TIM_OC2_SetConfig+0x64>)
  tmpcr2 =  TIMx->CR2;
 800177a:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800177c:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800177e:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001780:	680d      	ldr	r5, [r1, #0]
 8001782:	022d      	lsls	r5, r5, #8
 8001784:	432c      	orrs	r4, r5
  tmpccer &= ~TIM_CCER_CC2P;
 8001786:	2520      	movs	r5, #32
 8001788:	43aa      	bics	r2, r5
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800178a:	688d      	ldr	r5, [r1, #8]
 800178c:	012d      	lsls	r5, r5, #4
 800178e:	432a      	orrs	r2, r5
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001790:	4d10      	ldr	r5, [pc, #64]	; (80017d4 <TIM_OC2_SetConfig+0x68>)
 8001792:	42a8      	cmp	r0, r5
 8001794:	d10f      	bne.n	80017b6 <TIM_OC2_SetConfig+0x4a>
    tmpccer &= ~TIM_CCER_CC2NP;
 8001796:	2580      	movs	r5, #128	; 0x80
 8001798:	43aa      	bics	r2, r5
 800179a:	0015      	movs	r5, r2
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800179c:	68ca      	ldr	r2, [r1, #12]
 800179e:	0112      	lsls	r2, r2, #4
 80017a0:	432a      	orrs	r2, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 80017a2:	2540      	movs	r5, #64	; 0x40
 80017a4:	43aa      	bics	r2, r5
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80017a6:	4d0c      	ldr	r5, [pc, #48]	; (80017d8 <TIM_OC2_SetConfig+0x6c>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80017a8:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80017aa:	401d      	ands	r5, r3
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80017ac:	698b      	ldr	r3, [r1, #24]
 80017ae:	4333      	orrs	r3, r6
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	432b      	orrs	r3, r5
 80017b4:	e005      	b.n	80017c2 <TIM_OC2_SetConfig+0x56>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80017b6:	4d09      	ldr	r5, [pc, #36]	; (80017dc <TIM_OC2_SetConfig+0x70>)
 80017b8:	42a8      	cmp	r0, r5
 80017ba:	d0f4      	beq.n	80017a6 <TIM_OC2_SetConfig+0x3a>
 80017bc:	4d08      	ldr	r5, [pc, #32]	; (80017e0 <TIM_OC2_SetConfig+0x74>)
 80017be:	42a8      	cmp	r0, r5
 80017c0:	d0f1      	beq.n	80017a6 <TIM_OC2_SetConfig+0x3a>
  TIMx->CR2 = tmpcr2;
 80017c2:	6043      	str	r3, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 80017c4:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 80017c6:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80017c8:	6383      	str	r3, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80017ca:	6202      	str	r2, [r0, #32]
}
 80017cc:	bd70      	pop	{r4, r5, r6, pc}
 80017ce:	46c0      	nop			; (mov r8, r8)
 80017d0:	ffff8cff 	.word	0xffff8cff
 80017d4:	40012c00 	.word	0x40012c00
 80017d8:	fffff3ff 	.word	0xfffff3ff
 80017dc:	40014400 	.word	0x40014400
 80017e0:	40014800 	.word	0x40014800

080017e4 <HAL_TIM_PWM_ConfigChannel>:
{
 80017e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80017e6:	0006      	movs	r6, r0
 80017e8:	2302      	movs	r3, #2
 80017ea:	363c      	adds	r6, #60	; 0x3c
{
 80017ec:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 80017ee:	7831      	ldrb	r1, [r6, #0]
{
 80017f0:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 80017f2:	0018      	movs	r0, r3
 80017f4:	2901      	cmp	r1, #1
 80017f6:	d025      	beq.n	8001844 <HAL_TIM_PWM_ConfigChannel+0x60>
  htim->State = HAL_TIM_STATE_BUSY;
 80017f8:	0027      	movs	r7, r4
  __HAL_LOCK(htim);
 80017fa:	2101      	movs	r1, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80017fc:	373d      	adds	r7, #61	; 0x3d
  __HAL_LOCK(htim);
 80017fe:	7031      	strb	r1, [r6, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001800:	703b      	strb	r3, [r7, #0]
  switch (Channel)
 8001802:	2a0c      	cmp	r2, #12
 8001804:	d81a      	bhi.n	800183c <HAL_TIM_PWM_ConfigChannel+0x58>
 8001806:	0010      	movs	r0, r2
 8001808:	f7fe fc7e 	bl	8000108 <__gnu_thumb1_case_uqi>
 800180c:	18181807 	.word	0x18181807
 8001810:	1818181d 	.word	0x1818181d
 8001814:	1818182f 	.word	0x1818182f
 8001818:	41          	.byte	0x41
 8001819:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800181a:	0029      	movs	r1, r5
 800181c:	6820      	ldr	r0, [r4, #0]
 800181e:	f7ff fe71 	bl	8001504 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001822:	2208      	movs	r2, #8
 8001824:	6823      	ldr	r3, [r4, #0]
 8001826:	6999      	ldr	r1, [r3, #24]
 8001828:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800182a:	2104      	movs	r1, #4
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800182c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800182e:	699a      	ldr	r2, [r3, #24]
 8001830:	438a      	bics	r2, r1
 8001832:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001834:	699a      	ldr	r2, [r3, #24]
 8001836:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001838:	430a      	orrs	r2, r1
 800183a:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 800183c:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800183e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001840:	703b      	strb	r3, [r7, #0]
  __HAL_UNLOCK(htim);
 8001842:	7030      	strb	r0, [r6, #0]
}
 8001844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001846:	0029      	movs	r1, r5
 8001848:	6820      	ldr	r0, [r4, #0]
 800184a:	f7ff ff8f 	bl	800176c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800184e:	2280      	movs	r2, #128	; 0x80
 8001850:	6823      	ldr	r3, [r4, #0]
 8001852:	0112      	lsls	r2, r2, #4
 8001854:	6999      	ldr	r1, [r3, #24]
 8001856:	430a      	orrs	r2, r1
 8001858:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800185a:	699a      	ldr	r2, [r3, #24]
 800185c:	4915      	ldr	r1, [pc, #84]	; (80018b4 <HAL_TIM_PWM_ConfigChannel+0xd0>)
 800185e:	400a      	ands	r2, r1
 8001860:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001862:	692a      	ldr	r2, [r5, #16]
 8001864:	6999      	ldr	r1, [r3, #24]
 8001866:	0212      	lsls	r2, r2, #8
 8001868:	e7e6      	b.n	8001838 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800186a:	0029      	movs	r1, r5
 800186c:	6820      	ldr	r0, [r4, #0]
 800186e:	f7ff fe85 	bl	800157c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001872:	2208      	movs	r2, #8
 8001874:	6823      	ldr	r3, [r4, #0]
 8001876:	69d9      	ldr	r1, [r3, #28]
 8001878:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800187a:	2104      	movs	r1, #4
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800187c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800187e:	69da      	ldr	r2, [r3, #28]
 8001880:	438a      	bics	r2, r1
 8001882:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001884:	69da      	ldr	r2, [r3, #28]
 8001886:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001888:	430a      	orrs	r2, r1
 800188a:	61da      	str	r2, [r3, #28]
    break;
 800188c:	e7d6      	b.n	800183c <HAL_TIM_PWM_ConfigChannel+0x58>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800188e:	0029      	movs	r1, r5
 8001890:	6820      	ldr	r0, [r4, #0]
 8001892:	f7ff feb3 	bl	80015fc <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001896:	2280      	movs	r2, #128	; 0x80
 8001898:	6823      	ldr	r3, [r4, #0]
 800189a:	0112      	lsls	r2, r2, #4
 800189c:	69d9      	ldr	r1, [r3, #28]
 800189e:	430a      	orrs	r2, r1
 80018a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80018a2:	69da      	ldr	r2, [r3, #28]
 80018a4:	4903      	ldr	r1, [pc, #12]	; (80018b4 <HAL_TIM_PWM_ConfigChannel+0xd0>)
 80018a6:	400a      	ands	r2, r1
 80018a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80018aa:	692a      	ldr	r2, [r5, #16]
 80018ac:	69d9      	ldr	r1, [r3, #28]
 80018ae:	0212      	lsls	r2, r2, #8
 80018b0:	e7ea      	b.n	8001888 <HAL_TIM_PWM_ConfigChannel+0xa4>
 80018b2:	46c0      	nop			; (mov r8, r8)
 80018b4:	fffffbff 	.word	0xfffffbff

080018b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80018b8:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 80018ba:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80018bc:	4d03      	ldr	r5, [pc, #12]	; (80018cc <TIM_ETR_SetConfig+0x14>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80018be:	430a      	orrs	r2, r1
 80018c0:	021b      	lsls	r3, r3, #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80018c2:	402c      	ands	r4, r5
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80018c4:	4313      	orrs	r3, r2
 80018c6:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80018c8:	6083      	str	r3, [r0, #8]
}
 80018ca:	bd30      	pop	{r4, r5, pc}
 80018cc:	ffff00ff 	.word	0xffff00ff

080018d0 <HAL_TIM_ConfigClockSource>:
{
 80018d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80018d2:	0005      	movs	r5, r0
 80018d4:	2302      	movs	r3, #2
 80018d6:	353c      	adds	r5, #60	; 0x3c
 80018d8:	782a      	ldrb	r2, [r5, #0]
{
 80018da:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 80018dc:	0018      	movs	r0, r3
 80018de:	2a01      	cmp	r2, #1
 80018e0:	d019      	beq.n	8001916 <HAL_TIM_ConfigClockSource+0x46>
  htim->State = HAL_TIM_STATE_BUSY;
 80018e2:	0026      	movs	r6, r4
  __HAL_LOCK(htim);
 80018e4:	2701      	movs	r7, #1
  tmpsmcr = htim->Instance->SMCR;
 80018e6:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80018e8:	363d      	adds	r6, #61	; 0x3d
  __HAL_LOCK(htim);
 80018ea:	702f      	strb	r7, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80018ec:	7033      	strb	r3, [r6, #0]
  tmpsmcr = htim->Instance->SMCR;
 80018ee:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80018f0:	4a4f      	ldr	r2, [pc, #316]	; (8001a30 <HAL_TIM_ConfigClockSource+0x160>)
 80018f2:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 80018f4:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80018f6:	680b      	ldr	r3, [r1, #0]
 80018f8:	2b40      	cmp	r3, #64	; 0x40
 80018fa:	d100      	bne.n	80018fe <HAL_TIM_ConfigClockSource+0x2e>
 80018fc:	e06f      	b.n	80019de <HAL_TIM_ConfigClockSource+0x10e>
 80018fe:	d816      	bhi.n	800192e <HAL_TIM_ConfigClockSource+0x5e>
 8001900:	2b10      	cmp	r3, #16
 8001902:	d100      	bne.n	8001906 <HAL_TIM_ConfigClockSource+0x36>
 8001904:	e087      	b.n	8001a16 <HAL_TIM_ConfigClockSource+0x146>
 8001906:	d807      	bhi.n	8001918 <HAL_TIM_ConfigClockSource+0x48>
 8001908:	2b00      	cmp	r3, #0
 800190a:	d100      	bne.n	800190e <HAL_TIM_ConfigClockSource+0x3e>
 800190c:	e07d      	b.n	8001a0a <HAL_TIM_ConfigClockSource+0x13a>
  htim->State = HAL_TIM_STATE_READY;
 800190e:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001910:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001912:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(htim);
 8001914:	7028      	strb	r0, [r5, #0]
}
 8001916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 8001918:	2b20      	cmp	r3, #32
 800191a:	d100      	bne.n	800191e <HAL_TIM_ConfigClockSource+0x4e>
 800191c:	e081      	b.n	8001a22 <HAL_TIM_ConfigClockSource+0x152>
 800191e:	2b30      	cmp	r3, #48	; 0x30
 8001920:	d1f5      	bne.n	800190e <HAL_TIM_ConfigClockSource+0x3e>
   tmpsmcr &= ~TIM_SMCR_TS;
 8001922:	2270      	movs	r2, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8001924:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001926:	4393      	bics	r3, r2
 8001928:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800192a:	2337      	movs	r3, #55	; 0x37
 800192c:	e055      	b.n	80019da <HAL_TIM_ConfigClockSource+0x10a>
  switch (sClockSourceConfig->ClockSource)
 800192e:	2b70      	cmp	r3, #112	; 0x70
 8001930:	d033      	beq.n	800199a <HAL_TIM_ConfigClockSource+0xca>
 8001932:	d81b      	bhi.n	800196c <HAL_TIM_ConfigClockSource+0x9c>
 8001934:	2b50      	cmp	r3, #80	; 0x50
 8001936:	d03b      	beq.n	80019b0 <HAL_TIM_ConfigClockSource+0xe0>
 8001938:	2b60      	cmp	r3, #96	; 0x60
 800193a:	d1e8      	bne.n	800190e <HAL_TIM_ConfigClockSource+0x3e>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800193c:	2410      	movs	r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 800193e:	684b      	ldr	r3, [r1, #4]
 8001940:	68ca      	ldr	r2, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001942:	6a01      	ldr	r1, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001944:	4f3b      	ldr	r7, [pc, #236]	; (8001a34 <HAL_TIM_ConfigClockSource+0x164>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001946:	43a1      	bics	r1, r4
 8001948:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800194a:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800194c:	0312      	lsls	r2, r2, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800194e:	403c      	ands	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001950:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001952:	24a0      	movs	r4, #160	; 0xa0
  tmpccer = TIMx->CCER;
 8001954:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8001956:	6182      	str	r2, [r0, #24]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001958:	2270      	movs	r2, #112	; 0x70
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800195a:	43a1      	bics	r1, r4
  tmpccer |= (TIM_ICPolarity << 4U);
 800195c:	011b      	lsls	r3, r3, #4
 800195e:	430b      	orrs	r3, r1
  TIMx->CCER = tmpccer;
 8001960:	6203      	str	r3, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8001962:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001964:	4393      	bics	r3, r2
 8001966:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001968:	2367      	movs	r3, #103	; 0x67
 800196a:	e036      	b.n	80019da <HAL_TIM_ConfigClockSource+0x10a>
  switch (sClockSourceConfig->ClockSource)
 800196c:	2280      	movs	r2, #128	; 0x80
 800196e:	0152      	lsls	r2, r2, #5
 8001970:	4293      	cmp	r3, r2
 8001972:	d00d      	beq.n	8001990 <HAL_TIM_ConfigClockSource+0xc0>
 8001974:	2280      	movs	r2, #128	; 0x80
 8001976:	0192      	lsls	r2, r2, #6
 8001978:	4293      	cmp	r3, r2
 800197a:	d1c8      	bne.n	800190e <HAL_TIM_ConfigClockSource+0x3e>
      TIM_ETR_SetConfig(htim->Instance,
 800197c:	68cb      	ldr	r3, [r1, #12]
 800197e:	684a      	ldr	r2, [r1, #4]
 8001980:	6889      	ldr	r1, [r1, #8]
 8001982:	f7ff ff99 	bl	80018b8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001986:	2380      	movs	r3, #128	; 0x80
 8001988:	6822      	ldr	r2, [r4, #0]
 800198a:	01db      	lsls	r3, r3, #7
 800198c:	6891      	ldr	r1, [r2, #8]
 800198e:	e00c      	b.n	80019aa <HAL_TIM_ConfigClockSource+0xda>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001990:	2207      	movs	r2, #7
 8001992:	6883      	ldr	r3, [r0, #8]
 8001994:	4393      	bics	r3, r2
   TIMx->SMCR = tmpsmcr;
 8001996:	6083      	str	r3, [r0, #8]
 8001998:	e7b9      	b.n	800190e <HAL_TIM_ConfigClockSource+0x3e>
      TIM_ETR_SetConfig(htim->Instance,
 800199a:	68cb      	ldr	r3, [r1, #12]
 800199c:	684a      	ldr	r2, [r1, #4]
 800199e:	6889      	ldr	r1, [r1, #8]
 80019a0:	f7ff ff8a 	bl	80018b8 <TIM_ETR_SetConfig>
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80019a4:	2177      	movs	r1, #119	; 0x77
      tmpsmcr = htim->Instance->SMCR;
 80019a6:	6822      	ldr	r2, [r4, #0]
 80019a8:	6893      	ldr	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80019aa:	430b      	orrs	r3, r1
 80019ac:	6093      	str	r3, [r2, #8]
    break;
 80019ae:	e7ae      	b.n	800190e <HAL_TIM_ConfigClockSource+0x3e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80019b0:	684a      	ldr	r2, [r1, #4]
 80019b2:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 80019b4:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80019b6:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80019b8:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80019ba:	43bc      	bics	r4, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80019bc:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80019be:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80019c0:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80019c2:	43bc      	bics	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80019c4:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80019c6:	240a      	movs	r4, #10
 80019c8:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 80019ca:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80019cc:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80019ce:	6202      	str	r2, [r0, #32]
   tmpsmcr &= ~TIM_SMCR_TS;
 80019d0:	2270      	movs	r2, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 80019d2:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80019d4:	4393      	bics	r3, r2
 80019d6:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80019d8:	2357      	movs	r3, #87	; 0x57
 80019da:	4313      	orrs	r3, r2
 80019dc:	e7db      	b.n	8001996 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80019de:	684a      	ldr	r2, [r1, #4]
 80019e0:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 80019e2:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80019e4:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80019e6:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80019e8:	43bc      	bics	r4, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80019ea:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80019ec:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80019ee:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80019f0:	43bc      	bics	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80019f2:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80019f4:	240a      	movs	r4, #10
 80019f6:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 80019f8:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80019fa:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80019fc:	6202      	str	r2, [r0, #32]
   tmpsmcr &= ~TIM_SMCR_TS;
 80019fe:	2270      	movs	r2, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8001a00:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001a02:	4393      	bics	r3, r2
 8001a04:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001a06:	2347      	movs	r3, #71	; 0x47
 8001a08:	e7e7      	b.n	80019da <HAL_TIM_ConfigClockSource+0x10a>
   tmpsmcr &= ~TIM_SMCR_TS;
 8001a0a:	2270      	movs	r2, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8001a0c:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001a0e:	4393      	bics	r3, r2
 8001a10:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001a12:	2307      	movs	r3, #7
 8001a14:	e7e1      	b.n	80019da <HAL_TIM_ConfigClockSource+0x10a>
   tmpsmcr &= ~TIM_SMCR_TS;
 8001a16:	2270      	movs	r2, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8001a18:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001a1a:	4393      	bics	r3, r2
 8001a1c:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001a1e:	2317      	movs	r3, #23
 8001a20:	e7db      	b.n	80019da <HAL_TIM_ConfigClockSource+0x10a>
   tmpsmcr &= ~TIM_SMCR_TS;
 8001a22:	2270      	movs	r2, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8001a24:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001a26:	4393      	bics	r3, r2
 8001a28:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001a2a:	2327      	movs	r3, #39	; 0x27
 8001a2c:	e7d5      	b.n	80019da <HAL_TIM_ConfigClockSource+0x10a>
 8001a2e:	46c0      	nop			; (mov r8, r8)
 8001a30:	ffff0088 	.word	0xffff0088
 8001a34:	ffff0fff 	.word	0xffff0fff

08001a38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001a38:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8001a3a:	2401      	movs	r4, #1
 8001a3c:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001a3e:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 8001a40:	6a03      	ldr	r3, [r0, #32]
 8001a42:	43a3      	bics	r3, r4
 8001a44:	6203      	str	r3, [r0, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001a46:	6a03      	ldr	r3, [r0, #32]
 8001a48:	431a      	orrs	r2, r3
 8001a4a:	6202      	str	r2, [r0, #32]
}
 8001a4c:	bd10      	pop	{r4, pc}
	...

08001a50 <HAL_TIM_PWM_Start>:
{
 8001a50:	b510      	push	{r4, lr}
 8001a52:	0004      	movs	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001a54:	2201      	movs	r2, #1
 8001a56:	6800      	ldr	r0, [r0, #0]
 8001a58:	f7ff ffee 	bl	8001a38 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001a5c:	6823      	ldr	r3, [r4, #0]
 8001a5e:	4a0a      	ldr	r2, [pc, #40]	; (8001a88 <HAL_TIM_PWM_Start+0x38>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d005      	beq.n	8001a70 <HAL_TIM_PWM_Start+0x20>
 8001a64:	4a09      	ldr	r2, [pc, #36]	; (8001a8c <HAL_TIM_PWM_Start+0x3c>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d002      	beq.n	8001a70 <HAL_TIM_PWM_Start+0x20>
 8001a6a:	4a09      	ldr	r2, [pc, #36]	; (8001a90 <HAL_TIM_PWM_Start+0x40>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d104      	bne.n	8001a7a <HAL_TIM_PWM_Start+0x2a>
    __HAL_TIM_MOE_ENABLE(htim);
 8001a70:	2280      	movs	r2, #128	; 0x80
 8001a72:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001a74:	0212      	lsls	r2, r2, #8
 8001a76:	430a      	orrs	r2, r1
 8001a78:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	6819      	ldr	r1, [r3, #0]
}
 8001a7e:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8001a80:	430a      	orrs	r2, r1
 8001a82:	601a      	str	r2, [r3, #0]
}
 8001a84:	bd10      	pop	{r4, pc}
 8001a86:	46c0      	nop			; (mov r8, r8)
 8001a88:	40012c00 	.word	0x40012c00
 8001a8c:	40014400 	.word	0x40014400
 8001a90:	40014800 	.word	0x40014800

08001a94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8001a94:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8001a96:	0004      	movs	r4, r0
 8001a98:	343c      	adds	r4, #60	; 0x3c
 8001a9a:	7822      	ldrb	r2, [r4, #0]
{
 8001a9c:	0003      	movs	r3, r0
 8001a9e:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8001aa0:	2a01      	cmp	r2, #1
 8001aa2:	d017      	beq.n	8001ad4 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8001aa4:	001d      	movs	r5, r3

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001aa6:	681b      	ldr	r3, [r3, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001aa8:	353d      	adds	r5, #61	; 0x3d
 8001aaa:	7028      	strb	r0, [r5, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001aac:	685a      	ldr	r2, [r3, #4]
 8001aae:	306e      	adds	r0, #110	; 0x6e
 8001ab0:	4382      	bics	r2, r0
 8001ab2:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001ab4:	685a      	ldr	r2, [r3, #4]
 8001ab6:	6808      	ldr	r0, [r1, #0]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001ab8:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001aba:	4302      	orrs	r2, r0
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001abc:	2080      	movs	r0, #128	; 0x80
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001abe:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001ac0:	689a      	ldr	r2, [r3, #8]
 8001ac2:	4382      	bics	r2, r0
 8001ac4:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001ac6:	689a      	ldr	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8001ac8:	2000      	movs	r0, #0
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001aca:	430a      	orrs	r2, r1
 8001acc:	609a      	str	r2, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8001ad2:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8001ad4:	bd30      	pop	{r4, r5, pc}
	...

08001ad8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001ad8:	b570      	push	{r4, r5, r6, lr}
 8001ada:	0004      	movs	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001adc:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001ade:	69c2      	ldr	r2, [r0, #28]
 8001ae0:	6883      	ldr	r3, [r0, #8]
 8001ae2:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001ae4:	6829      	ldr	r1, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001ae6:	4303      	orrs	r3, r0
 8001ae8:	6960      	ldr	r0, [r4, #20]
 8001aea:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001aec:	4835      	ldr	r0, [pc, #212]	; (8001bc4 <UART_SetConfig+0xec>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001aee:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001af0:	4001      	ands	r1, r0
 8001af2:	430b      	orrs	r3, r1
 8001af4:	602b      	str	r3, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001af6:	686b      	ldr	r3, [r5, #4]
 8001af8:	4933      	ldr	r1, [pc, #204]	; (8001bc8 <UART_SetConfig+0xf0>)
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001afa:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001afc:	400b      	ands	r3, r1
 8001afe:	68e1      	ldr	r1, [r4, #12]
 8001b00:	430b      	orrs	r3, r1
 8001b02:	606b      	str	r3, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001b04:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001b06:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001b08:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001b0a:	4830      	ldr	r0, [pc, #192]	; (8001bcc <UART_SetConfig+0xf4>)
 8001b0c:	4001      	ands	r1, r0
 8001b0e:	430b      	orrs	r3, r1

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001b10:	2103      	movs	r1, #3
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001b12:	60ab      	str	r3, [r5, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001b14:	4b2e      	ldr	r3, [pc, #184]	; (8001bd0 <UART_SetConfig+0xf8>)
 8001b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b18:	400b      	ands	r3, r1
 8001b1a:	492e      	ldr	r1, [pc, #184]	; (8001bd4 <UART_SetConfig+0xfc>)
 8001b1c:	5cc8      	ldrb	r0, [r1, r3]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001b1e:	2380      	movs	r3, #128	; 0x80
 8001b20:	021b      	lsls	r3, r3, #8
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d12c      	bne.n	8001b80 <UART_SetConfig+0xa8>
  {
    switch (clocksource)
 8001b26:	2808      	cmp	r0, #8
 8001b28:	d827      	bhi.n	8001b7a <UART_SetConfig+0xa2>
 8001b2a:	f7fe faed 	bl	8000108 <__gnu_thumb1_case_uqi>
 8001b2e:	2605      	.short	0x2605
 8001b30:	261e260b 	.word	0x261e260b
 8001b34:	2626      	.short	0x2626
 8001b36:	21          	.byte	0x21
 8001b37:	00          	.byte	0x00
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001b38:	f7ff fc50 	bl	80013dc <HAL_RCC_GetPCLK1Freq>
        break;
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001b3c:	6863      	ldr	r3, [r4, #4]
 8001b3e:	0040      	lsls	r0, r0, #1
 8001b40:	085b      	lsrs	r3, r3, #1
 8001b42:	e002      	b.n	8001b4a <UART_SetConfig+0x72>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001b44:	6863      	ldr	r3, [r4, #4]
 8001b46:	0858      	lsrs	r0, r3, #1
 8001b48:	4b23      	ldr	r3, [pc, #140]	; (8001bd8 <UART_SetConfig+0x100>)
        break;
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001b4a:	18c0      	adds	r0, r0, r3
 8001b4c:	6861      	ldr	r1, [r4, #4]
 8001b4e:	f7fe fae5 	bl	800011c <__udivsi3>
 8001b52:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8001b54:	2000      	movs	r0, #0
      default:
        ret = HAL_ERROR;
        break;
    }

    brrtemp = usartdiv & 0xFFF0U;
 8001b56:	220f      	movs	r2, #15
 8001b58:	0019      	movs	r1, r3
 8001b5a:	4391      	bics	r1, r2
 8001b5c:	000a      	movs	r2, r1
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001b5e:	071b      	lsls	r3, r3, #28
    huart->Instance->BRR = brrtemp;
 8001b60:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001b62:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 8001b64:	4313      	orrs	r3, r2
 8001b66:	60cb      	str	r3, [r1, #12]
    }
  }

  return ret;

}
 8001b68:	bd70      	pop	{r4, r5, r6, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001b6a:	f7ff fb69 	bl	8001240 <HAL_RCC_GetSysClockFreq>
 8001b6e:	e7e5      	b.n	8001b3c <UART_SetConfig+0x64>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001b70:	6863      	ldr	r3, [r4, #4]
 8001b72:	0858      	lsrs	r0, r3, #1
 8001b74:	2380      	movs	r3, #128	; 0x80
 8001b76:	025b      	lsls	r3, r3, #9
 8001b78:	e7e7      	b.n	8001b4a <UART_SetConfig+0x72>
        ret = HAL_ERROR;
 8001b7a:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	e7ea      	b.n	8001b56 <UART_SetConfig+0x7e>
    switch (clocksource)
 8001b80:	2808      	cmp	r0, #8
 8001b82:	d81d      	bhi.n	8001bc0 <UART_SetConfig+0xe8>
 8001b84:	f7fe fac0 	bl	8000108 <__gnu_thumb1_case_uqi>
 8001b88:	1c0a1c05 	.word	0x1c0a1c05
 8001b8c:	1c1c1c14 	.word	0x1c1c1c14
 8001b90:	17          	.byte	0x17
 8001b91:	00          	.byte	0x00
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001b92:	f7ff fc23 	bl	80013dc <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001b96:	6861      	ldr	r1, [r4, #4]
 8001b98:	084b      	lsrs	r3, r1, #1
 8001b9a:	e002      	b.n	8001ba2 <UART_SetConfig+0xca>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001b9c:	6861      	ldr	r1, [r4, #4]
 8001b9e:	4b0f      	ldr	r3, [pc, #60]	; (8001bdc <UART_SetConfig+0x104>)
 8001ba0:	0848      	lsrs	r0, r1, #1
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001ba2:	18c0      	adds	r0, r0, r3
 8001ba4:	f7fe faba 	bl	800011c <__udivsi3>
 8001ba8:	b280      	uxth	r0, r0
 8001baa:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001bac:	2000      	movs	r0, #0
        break;
 8001bae:	e7db      	b.n	8001b68 <UART_SetConfig+0x90>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001bb0:	f7ff fb46 	bl	8001240 <HAL_RCC_GetSysClockFreq>
 8001bb4:	e7ef      	b.n	8001b96 <UART_SetConfig+0xbe>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001bb6:	2380      	movs	r3, #128	; 0x80
 8001bb8:	6861      	ldr	r1, [r4, #4]
 8001bba:	021b      	lsls	r3, r3, #8
 8001bbc:	0848      	lsrs	r0, r1, #1
 8001bbe:	e7f0      	b.n	8001ba2 <UART_SetConfig+0xca>
        ret = HAL_ERROR;
 8001bc0:	2001      	movs	r0, #1
 8001bc2:	e7d1      	b.n	8001b68 <UART_SetConfig+0x90>
 8001bc4:	ffff69f3 	.word	0xffff69f3
 8001bc8:	ffffcfff 	.word	0xffffcfff
 8001bcc:	fffff4ff 	.word	0xfffff4ff
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	080024c0 	.word	0x080024c0
 8001bd8:	00f42400 	.word	0x00f42400
 8001bdc:	007a1200 	.word	0x007a1200

08001be0 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001be0:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8001be2:	b530      	push	{r4, r5, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001be4:	07da      	lsls	r2, r3, #31
 8001be6:	d506      	bpl.n	8001bf6 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001be8:	6801      	ldr	r1, [r0, #0]
 8001bea:	4c28      	ldr	r4, [pc, #160]	; (8001c8c <UART_AdvFeatureConfig+0xac>)
 8001bec:	684a      	ldr	r2, [r1, #4]
 8001bee:	4022      	ands	r2, r4
 8001bf0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001bf2:	4322      	orrs	r2, r4
 8001bf4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001bf6:	079a      	lsls	r2, r3, #30
 8001bf8:	d506      	bpl.n	8001c08 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001bfa:	6801      	ldr	r1, [r0, #0]
 8001bfc:	4c24      	ldr	r4, [pc, #144]	; (8001c90 <UART_AdvFeatureConfig+0xb0>)
 8001bfe:	684a      	ldr	r2, [r1, #4]
 8001c00:	4022      	ands	r2, r4
 8001c02:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001c04:	4322      	orrs	r2, r4
 8001c06:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001c08:	075a      	lsls	r2, r3, #29
 8001c0a:	d506      	bpl.n	8001c1a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001c0c:	6801      	ldr	r1, [r0, #0]
 8001c0e:	4c21      	ldr	r4, [pc, #132]	; (8001c94 <UART_AdvFeatureConfig+0xb4>)
 8001c10:	684a      	ldr	r2, [r1, #4]
 8001c12:	4022      	ands	r2, r4
 8001c14:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001c16:	4322      	orrs	r2, r4
 8001c18:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001c1a:	071a      	lsls	r2, r3, #28
 8001c1c:	d506      	bpl.n	8001c2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001c1e:	6801      	ldr	r1, [r0, #0]
 8001c20:	4c1d      	ldr	r4, [pc, #116]	; (8001c98 <UART_AdvFeatureConfig+0xb8>)
 8001c22:	684a      	ldr	r2, [r1, #4]
 8001c24:	4022      	ands	r2, r4
 8001c26:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001c28:	4322      	orrs	r2, r4
 8001c2a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001c2c:	06da      	lsls	r2, r3, #27
 8001c2e:	d506      	bpl.n	8001c3e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001c30:	6801      	ldr	r1, [r0, #0]
 8001c32:	4c1a      	ldr	r4, [pc, #104]	; (8001c9c <UART_AdvFeatureConfig+0xbc>)
 8001c34:	688a      	ldr	r2, [r1, #8]
 8001c36:	4022      	ands	r2, r4
 8001c38:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001c3a:	4322      	orrs	r2, r4
 8001c3c:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001c3e:	069a      	lsls	r2, r3, #26
 8001c40:	d506      	bpl.n	8001c50 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001c42:	6801      	ldr	r1, [r0, #0]
 8001c44:	4c16      	ldr	r4, [pc, #88]	; (8001ca0 <UART_AdvFeatureConfig+0xc0>)
 8001c46:	688a      	ldr	r2, [r1, #8]
 8001c48:	4022      	ands	r2, r4
 8001c4a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001c4c:	4322      	orrs	r2, r4
 8001c4e:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001c50:	065a      	lsls	r2, r3, #25
 8001c52:	d510      	bpl.n	8001c76 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001c54:	6801      	ldr	r1, [r0, #0]
 8001c56:	4d13      	ldr	r5, [pc, #76]	; (8001ca4 <UART_AdvFeatureConfig+0xc4>)
 8001c58:	684a      	ldr	r2, [r1, #4]
 8001c5a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001c5c:	402a      	ands	r2, r5
 8001c5e:	4322      	orrs	r2, r4
 8001c60:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001c62:	2280      	movs	r2, #128	; 0x80
 8001c64:	0352      	lsls	r2, r2, #13
 8001c66:	4294      	cmp	r4, r2
 8001c68:	d105      	bne.n	8001c76 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001c6a:	684a      	ldr	r2, [r1, #4]
 8001c6c:	4c0e      	ldr	r4, [pc, #56]	; (8001ca8 <UART_AdvFeatureConfig+0xc8>)
 8001c6e:	4022      	ands	r2, r4
 8001c70:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001c72:	4322      	orrs	r2, r4
 8001c74:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001c76:	061b      	lsls	r3, r3, #24
 8001c78:	d506      	bpl.n	8001c88 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001c7a:	6802      	ldr	r2, [r0, #0]
 8001c7c:	490b      	ldr	r1, [pc, #44]	; (8001cac <UART_AdvFeatureConfig+0xcc>)
 8001c7e:	6853      	ldr	r3, [r2, #4]
 8001c80:	400b      	ands	r3, r1
 8001c82:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001c84:	430b      	orrs	r3, r1
 8001c86:	6053      	str	r3, [r2, #4]
  }
}
 8001c88:	bd30      	pop	{r4, r5, pc}
 8001c8a:	46c0      	nop			; (mov r8, r8)
 8001c8c:	fffdffff 	.word	0xfffdffff
 8001c90:	fffeffff 	.word	0xfffeffff
 8001c94:	fffbffff 	.word	0xfffbffff
 8001c98:	ffff7fff 	.word	0xffff7fff
 8001c9c:	ffffefff 	.word	0xffffefff
 8001ca0:	ffffdfff 	.word	0xffffdfff
 8001ca4:	ffefffff 	.word	0xffefffff
 8001ca8:	ff9fffff 	.word	0xff9fffff
 8001cac:	fff7ffff 	.word	0xfff7ffff

08001cb0 <HAL_UART_Init>:
{
 8001cb0:	b570      	push	{r4, r5, r6, lr}
 8001cb2:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8001cb4:	d101      	bne.n	8001cba <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8001cb6:	2001      	movs	r0, #1
}
 8001cb8:	bd70      	pop	{r4, r5, r6, pc}
  if(huart->gState == HAL_UART_STATE_RESET)
 8001cba:	0005      	movs	r5, r0
 8001cbc:	3569      	adds	r5, #105	; 0x69
 8001cbe:	782b      	ldrb	r3, [r5, #0]
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d104      	bne.n	8001cd0 <HAL_UART_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 8001cc6:	0002      	movs	r2, r0
 8001cc8:	3268      	adds	r2, #104	; 0x68
 8001cca:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8001ccc:	f000 fb16 	bl	80022fc <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001cd0:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001cd2:	2101      	movs	r1, #1
 8001cd4:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001cd6:	702b      	strb	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8001cd8:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001cda:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8001cdc:	438b      	bics	r3, r1
 8001cde:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001ce0:	f7ff fefa 	bl	8001ad8 <UART_SetConfig>
 8001ce4:	2801      	cmp	r0, #1
 8001ce6:	d0e6      	beq.n	8001cb6 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001ce8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d002      	beq.n	8001cf4 <HAL_UART_Init+0x44>
    UART_AdvFeatureConfig(huart);
 8001cee:	0020      	movs	r0, r4
 8001cf0:	f7ff ff76 	bl	8001be0 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001cf4:	6823      	ldr	r3, [r4, #0]
 8001cf6:	490b      	ldr	r1, [pc, #44]	; (8001d24 <HAL_UART_Init+0x74>)
 8001cf8:	685a      	ldr	r2, [r3, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cfa:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001cfc:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001cfe:	2108      	movs	r1, #8
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001d00:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001d02:	689a      	ldr	r2, [r3, #8]
 8001d04:	438a      	bics	r2, r1
 8001d06:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001d08:	2201      	movs	r2, #1
 8001d0a:	6819      	ldr	r1, [r3, #0]
 8001d0c:	430a      	orrs	r2, r1
 8001d0e:	601a      	str	r2, [r3, #0]
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
  huart->RxState = HAL_UART_STATE_READY;
 8001d10:	0022      	movs	r2, r4
  huart->gState  = HAL_UART_STATE_READY;
 8001d12:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d14:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxState = HAL_UART_STATE_READY;
 8001d16:	326a      	adds	r2, #106	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8001d18:	3468      	adds	r4, #104	; 0x68
  huart->gState  = HAL_UART_STATE_READY;
 8001d1a:	702b      	strb	r3, [r5, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8001d1c:	7013      	strb	r3, [r2, #0]
  __HAL_UNLOCK(huart);
 8001d1e:	7020      	strb	r0, [r4, #0]
  return (UART_CheckIdleState(huart));
 8001d20:	e7ca      	b.n	8001cb8 <HAL_UART_Init+0x8>
 8001d22:	46c0      	nop			; (mov r8, r8)
 8001d24:	fffff7ff 	.word	0xfffff7ff

08001d28 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d2a:	0004      	movs	r4, r0
 8001d2c:	000e      	movs	r6, r1
 8001d2e:	0015      	movs	r5, r2
 8001d30:	001f      	movs	r7, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d32:	6822      	ldr	r2, [r4, #0]
 8001d34:	69d3      	ldr	r3, [r2, #28]
 8001d36:	4033      	ands	r3, r6
 8001d38:	1b9b      	subs	r3, r3, r6
 8001d3a:	4259      	negs	r1, r3
 8001d3c:	414b      	adcs	r3, r1
 8001d3e:	42ab      	cmp	r3, r5
 8001d40:	d001      	beq.n	8001d46 <UART_WaitOnFlagUntilTimeout+0x1e>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001d42:	2000      	movs	r0, #0
 8001d44:	e018      	b.n	8001d78 <UART_WaitOnFlagUntilTimeout+0x50>
    if(Timeout != HAL_MAX_DELAY)
 8001d46:	9b06      	ldr	r3, [sp, #24]
 8001d48:	3301      	adds	r3, #1
 8001d4a:	d0f3      	beq.n	8001d34 <UART_WaitOnFlagUntilTimeout+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001d4c:	9b06      	ldr	r3, [sp, #24]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d113      	bne.n	8001d7a <UART_WaitOnFlagUntilTimeout+0x52>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001d52:	6823      	ldr	r3, [r4, #0]
 8001d54:	490c      	ldr	r1, [pc, #48]	; (8001d88 <UART_WaitOnFlagUntilTimeout+0x60>)
 8001d56:	681a      	ldr	r2, [r3, #0]
        __HAL_UNLOCK(huart);
 8001d58:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001d5a:	400a      	ands	r2, r1
 8001d5c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d5e:	689a      	ldr	r2, [r3, #8]
 8001d60:	31a3      	adds	r1, #163	; 0xa3
 8001d62:	31ff      	adds	r1, #255	; 0xff
 8001d64:	438a      	bics	r2, r1
 8001d66:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8001d68:	0022      	movs	r2, r4
 8001d6a:	2320      	movs	r3, #32
 8001d6c:	3269      	adds	r2, #105	; 0x69
 8001d6e:	7013      	strb	r3, [r2, #0]
        huart->RxState = HAL_UART_STATE_READY;
 8001d70:	7053      	strb	r3, [r2, #1]
        __HAL_UNLOCK(huart);
 8001d72:	2300      	movs	r3, #0
 8001d74:	3468      	adds	r4, #104	; 0x68
 8001d76:	7023      	strb	r3, [r4, #0]
}
 8001d78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001d7a:	f7fe fb6f 	bl	800045c <HAL_GetTick>
 8001d7e:	9b06      	ldr	r3, [sp, #24]
 8001d80:	1bc0      	subs	r0, r0, r7
 8001d82:	4283      	cmp	r3, r0
 8001d84:	d2d5      	bcs.n	8001d32 <UART_WaitOnFlagUntilTimeout+0xa>
 8001d86:	e7e4      	b.n	8001d52 <UART_WaitOnFlagUntilTimeout+0x2a>
 8001d88:	fffffe5f 	.word	0xfffffe5f

08001d8c <HAL_UART_Transmit>:
{
 8001d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(huart->gState == HAL_UART_STATE_READY)
 8001d8e:	0007      	movs	r7, r0
{
 8001d90:	b085      	sub	sp, #20
 8001d92:	9303      	str	r3, [sp, #12]
  if(huart->gState == HAL_UART_STATE_READY)
 8001d94:	3769      	adds	r7, #105	; 0x69
 8001d96:	783b      	ldrb	r3, [r7, #0]
{
 8001d98:	0004      	movs	r4, r0
 8001d9a:	000d      	movs	r5, r1
 8001d9c:	0016      	movs	r6, r2
    return HAL_BUSY;
 8001d9e:	2002      	movs	r0, #2
  if(huart->gState == HAL_UART_STATE_READY)
 8001da0:	2b20      	cmp	r3, #32
 8001da2:	d146      	bne.n	8001e32 <HAL_UART_Transmit+0xa6>
      return  HAL_ERROR;
 8001da4:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 8001da6:	2900      	cmp	r1, #0
 8001da8:	d043      	beq.n	8001e32 <HAL_UART_Transmit+0xa6>
 8001daa:	2a00      	cmp	r2, #0
 8001dac:	d041      	beq.n	8001e32 <HAL_UART_Transmit+0xa6>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001dae:	2380      	movs	r3, #128	; 0x80
 8001db0:	68a2      	ldr	r2, [r4, #8]
 8001db2:	015b      	lsls	r3, r3, #5
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d104      	bne.n	8001dc2 <HAL_UART_Transmit+0x36>
 8001db8:	6923      	ldr	r3, [r4, #16]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d101      	bne.n	8001dc2 <HAL_UART_Transmit+0x36>
      if((((uint32_t)pData)&1U) != 0U)
 8001dbe:	4201      	tst	r1, r0
 8001dc0:	d137      	bne.n	8001e32 <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 8001dc2:	0023      	movs	r3, r4
 8001dc4:	3368      	adds	r3, #104	; 0x68
 8001dc6:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 8001dc8:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8001dca:	2a01      	cmp	r2, #1
 8001dcc:	d031      	beq.n	8001e32 <HAL_UART_Transmit+0xa6>
 8001dce:	2201      	movs	r2, #1
 8001dd0:	701a      	strb	r2, [r3, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001dd6:	3321      	adds	r3, #33	; 0x21
 8001dd8:	703b      	strb	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8001dda:	f7fe fb3f 	bl	800045c <HAL_GetTick>
    huart->TxXferSize = Size;
 8001dde:	0023      	movs	r3, r4
 8001de0:	3350      	adds	r3, #80	; 0x50
 8001de2:	801e      	strh	r6, [r3, #0]
    huart->TxXferCount = Size;
 8001de4:	805e      	strh	r6, [r3, #2]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001de6:	2680      	movs	r6, #128	; 0x80
    tickstart = HAL_GetTick();
 8001de8:	9002      	str	r0, [sp, #8]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001dea:	0176      	lsls	r6, r6, #5
    while(huart->TxXferCount > 0)
 8001dec:	0021      	movs	r1, r4
 8001dee:	3152      	adds	r1, #82	; 0x52
 8001df0:	880a      	ldrh	r2, [r1, #0]
 8001df2:	b292      	uxth	r2, r2
 8001df4:	2a00      	cmp	r2, #0
 8001df6:	d10d      	bne.n	8001e14 <HAL_UART_Transmit+0x88>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001df8:	9b03      	ldr	r3, [sp, #12]
 8001dfa:	2140      	movs	r1, #64	; 0x40
 8001dfc:	9300      	str	r3, [sp, #0]
 8001dfe:	0020      	movs	r0, r4
 8001e00:	9b02      	ldr	r3, [sp, #8]
 8001e02:	f7ff ff91 	bl	8001d28 <UART_WaitOnFlagUntilTimeout>
 8001e06:	2800      	cmp	r0, #0
 8001e08:	d112      	bne.n	8001e30 <HAL_UART_Transmit+0xa4>
    huart->gState = HAL_UART_STATE_READY;
 8001e0a:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8001e0c:	3468      	adds	r4, #104	; 0x68
    huart->gState = HAL_UART_STATE_READY;
 8001e0e:	703b      	strb	r3, [r7, #0]
    __HAL_UNLOCK(huart);
 8001e10:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8001e12:	e00e      	b.n	8001e32 <HAL_UART_Transmit+0xa6>
      huart->TxXferCount--;
 8001e14:	880b      	ldrh	r3, [r1, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e16:	2200      	movs	r2, #0
      huart->TxXferCount--;
 8001e18:	3b01      	subs	r3, #1
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	800b      	strh	r3, [r1, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e1e:	9b03      	ldr	r3, [sp, #12]
 8001e20:	2180      	movs	r1, #128	; 0x80
 8001e22:	9300      	str	r3, [sp, #0]
 8001e24:	0020      	movs	r0, r4
 8001e26:	9b02      	ldr	r3, [sp, #8]
 8001e28:	f7ff ff7e 	bl	8001d28 <UART_WaitOnFlagUntilTimeout>
 8001e2c:	2800      	cmp	r0, #0
 8001e2e:	d002      	beq.n	8001e36 <HAL_UART_Transmit+0xaa>
        return HAL_TIMEOUT;
 8001e30:	2003      	movs	r0, #3
}
 8001e32:	b005      	add	sp, #20
 8001e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e36:	68a3      	ldr	r3, [r4, #8]
 8001e38:	6822      	ldr	r2, [r4, #0]
 8001e3a:	42b3      	cmp	r3, r6
 8001e3c:	d108      	bne.n	8001e50 <HAL_UART_Transmit+0xc4>
 8001e3e:	6923      	ldr	r3, [r4, #16]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d105      	bne.n	8001e50 <HAL_UART_Transmit+0xc4>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001e44:	882b      	ldrh	r3, [r5, #0]
        pData += 2;
 8001e46:	3502      	adds	r5, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001e48:	05db      	lsls	r3, r3, #23
 8001e4a:	0ddb      	lsrs	r3, r3, #23
 8001e4c:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2;
 8001e4e:	e7cd      	b.n	8001dec <HAL_UART_Transmit+0x60>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8001e50:	782b      	ldrb	r3, [r5, #0]
 8001e52:	3501      	adds	r5, #1
 8001e54:	8513      	strh	r3, [r2, #40]	; 0x28
 8001e56:	e7c9      	b.n	8001dec <HAL_UART_Transmit+0x60>

08001e58 <imprimirHum>:
uint16_t adc[2], buffer[2];
uint8_t vaso[2] = {25 , 100};


// função para mandar as leituras ao aplicativo
void imprimirHum(){
 8001e58:	b5f0      	push	{r4, r5, r6, r7, lr}


	char valor1[9] = {
			(adc[0]/100)%10 + 48, (adc[0]/10)%10 + 48,
 8001e5a:	4d24      	ldr	r5, [pc, #144]	; (8001eec <imprimirHum+0x94>)
void imprimirHum(){
 8001e5c:	b085      	sub	sp, #20
			(adc[0]/100)%10 + 48, (adc[0]/10)%10 + 48,
 8001e5e:	882f      	ldrh	r7, [r5, #0]
 8001e60:	2164      	movs	r1, #100	; 0x64
 8001e62:	0038      	movs	r0, r7
 8001e64:	f7fe f95a 	bl	800011c <__udivsi3>
 8001e68:	210a      	movs	r1, #10
 8001e6a:	b280      	uxth	r0, r0
 8001e6c:	f7fe f9dc 	bl	8000228 <__aeabi_uidivmod>
	char valor1[9] = {
 8001e70:	ac01      	add	r4, sp, #4
			(adc[0]/100)%10 + 48, (adc[0]/10)%10 + 48,
 8001e72:	3130      	adds	r1, #48	; 0x30
	char valor1[9] = {
 8001e74:	7021      	strb	r1, [r4, #0]
			(adc[0]/100)%10 + 48, (adc[0]/10)%10 + 48,
 8001e76:	0038      	movs	r0, r7
 8001e78:	210a      	movs	r1, #10
 8001e7a:	f7fe f94f 	bl	800011c <__udivsi3>
 8001e7e:	210a      	movs	r1, #10
 8001e80:	b280      	uxth	r0, r0
 8001e82:	f7fe f9d1 	bl	8000228 <__aeabi_uidivmod>
	char valor1[9] = {
 8001e86:	262e      	movs	r6, #46	; 0x2e
			(adc[0]/100)%10 + 48, (adc[0]/10)%10 + 48,
 8001e88:	3130      	adds	r1, #48	; 0x30
	char valor1[9] = {
 8001e8a:	7061      	strb	r1, [r4, #1]
			'.', (adc[0]%10) + 48, // primeira leitura
 8001e8c:	0038      	movs	r0, r7
 8001e8e:	210a      	movs	r1, #10
	char valor1[9] = {
 8001e90:	70a6      	strb	r6, [r4, #2]
			'.', (adc[0]%10) + 48, // primeira leitura
 8001e92:	f7fe f9c9 	bl	8000228 <__aeabi_uidivmod>
	char valor1[9] = {
 8001e96:	237c      	movs	r3, #124	; 0x7c
			'.', (adc[0]%10) + 48, // primeira leitura
 8001e98:	3130      	adds	r1, #48	; 0x30
	char valor1[9] = {
 8001e9a:	7123      	strb	r3, [r4, #4]
 8001e9c:	70e1      	strb	r1, [r4, #3]
			'|', // caractere separador, para o app
			(adc[1]/100)%10 + 48, (adc[1]/10)%10 + 48,
 8001e9e:	886d      	ldrh	r5, [r5, #2]
 8001ea0:	2164      	movs	r1, #100	; 0x64
 8001ea2:	0028      	movs	r0, r5
 8001ea4:	f7fe f93a 	bl	800011c <__udivsi3>
 8001ea8:	210a      	movs	r1, #10
 8001eaa:	b280      	uxth	r0, r0
 8001eac:	f7fe f9bc 	bl	8000228 <__aeabi_uidivmod>
 8001eb0:	3130      	adds	r1, #48	; 0x30
	char valor1[9] = {
 8001eb2:	7161      	strb	r1, [r4, #5]
			(adc[1]/100)%10 + 48, (adc[1]/10)%10 + 48,
 8001eb4:	0028      	movs	r0, r5
 8001eb6:	210a      	movs	r1, #10
 8001eb8:	f7fe f930 	bl	800011c <__udivsi3>
 8001ebc:	210a      	movs	r1, #10
 8001ebe:	b280      	uxth	r0, r0
 8001ec0:	f7fe f9b2 	bl	8000228 <__aeabi_uidivmod>
 8001ec4:	3130      	adds	r1, #48	; 0x30
	char valor1[9] = {
 8001ec6:	71a1      	strb	r1, [r4, #6]
			'.', (adc[1]%10) + 48 // segunda leitura
 8001ec8:	0028      	movs	r0, r5
 8001eca:	210a      	movs	r1, #10
	char valor1[9] = {
 8001ecc:	71e6      	strb	r6, [r4, #7]
			'.', (adc[1]%10) + 48 // segunda leitura
 8001ece:	f7fe f9ab 	bl	8000228 <__aeabi_uidivmod>
 8001ed2:	3130      	adds	r1, #48	; 0x30
	char valor1[9] = {
 8001ed4:	7221      	strb	r1, [r4, #8]
	};
	HAL_UART_Transmit(&huart1,(uint8_t *) valor1,9,100);
 8001ed6:	2364      	movs	r3, #100	; 0x64
 8001ed8:	2209      	movs	r2, #9
 8001eda:	0021      	movs	r1, r4
 8001edc:	4804      	ldr	r0, [pc, #16]	; (8001ef0 <imprimirHum+0x98>)
 8001ede:	f7ff ff55 	bl	8001d8c <HAL_UART_Transmit>
	HAL_Delay(710);
 8001ee2:	4804      	ldr	r0, [pc, #16]	; (8001ef4 <imprimirHum+0x9c>)
 8001ee4:	f7fe fac0 	bl	8000468 <HAL_Delay>
}
 8001ee8:	b005      	add	sp, #20
 8001eea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001eec:	200000dc 	.word	0x200000dc
 8001ef0:	20000068 	.word	0x20000068
 8001ef4:	000002c6 	.word	0x000002c6

08001ef8 <lerAD>:


//função para ler os sensores
void lerAD()
{
 8001ef8:	b510      	push	{r4, lr}
	  HAL_ADC_Start_DMA(&hadc,(uint32_t *) buffer, 2);
 8001efa:	4c05      	ldr	r4, [pc, #20]	; (8001f10 <lerAD+0x18>)
 8001efc:	2202      	movs	r2, #2
 8001efe:	4905      	ldr	r1, [pc, #20]	; (8001f14 <lerAD+0x1c>)
 8001f00:	0020      	movs	r0, r4
 8001f02:	f7fe fc17 	bl	8000734 <HAL_ADC_Start_DMA>
	  HAL_ADC_Stop_DMA(&hadc);
 8001f06:	0020      	movs	r0, r4
 8001f08:	f7fe fc5e 	bl	80007c8 <HAL_ADC_Stop_DMA>
}
 8001f0c:	bd10      	pop	{r4, pc}
 8001f0e:	46c0      	nop			; (mov r8, r8)
 8001f10:	20000124 	.word	0x20000124
 8001f14:	200000d8 	.word	0x200000d8

08001f18 <HAL_ADC_ConvCpltCallback>:


// Função de retorno(interrupção) para quando o AD terminar a leitura
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f18:	b570      	push	{r4, r5, r6, lr}
	for (int i =0; i<2; i++)
	{
	  adc[i] = buffer[i];
 8001f1a:	4e0b      	ldr	r6, [pc, #44]	; (8001f48 <HAL_ADC_ConvCpltCallback+0x30>)
	  adc[i] = 1000 - (1000*adc[i])/4095;
 8001f1c:	4c0b      	ldr	r4, [pc, #44]	; (8001f4c <HAL_ADC_ConvCpltCallback+0x34>)
 8001f1e:	8830      	ldrh	r0, [r6, #0]
 8001f20:	490b      	ldr	r1, [pc, #44]	; (8001f50 <HAL_ADC_ConvCpltCallback+0x38>)
 8001f22:	4360      	muls	r0, r4
 8001f24:	f7fe f984 	bl	8000230 <__divsi3>
 8001f28:	23fa      	movs	r3, #250	; 0xfa
 8001f2a:	4d0a      	ldr	r5, [pc, #40]	; (8001f54 <HAL_ADC_ConvCpltCallback+0x3c>)
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	18c0      	adds	r0, r0, r3
 8001f30:	8028      	strh	r0, [r5, #0]
 8001f32:	8870      	ldrh	r0, [r6, #2]
 8001f34:	4906      	ldr	r1, [pc, #24]	; (8001f50 <HAL_ADC_ConvCpltCallback+0x38>)
 8001f36:	4360      	muls	r0, r4
 8001f38:	f7fe f97a 	bl	8000230 <__divsi3>
 8001f3c:	23fa      	movs	r3, #250	; 0xfa
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	18c0      	adds	r0, r0, r3
 8001f42:	8068      	strh	r0, [r5, #2]
	}
}
 8001f44:	bd70      	pop	{r4, r5, r6, pc}
 8001f46:	46c0      	nop			; (mov r8, r8)
 8001f48:	200000d8 	.word	0x200000d8
 8001f4c:	fffffc18 	.word	0xfffffc18
 8001f50:	00000fff 	.word	0x00000fff
 8001f54:	200000dc 	.word	0x200000dc

08001f58 <aguar>:

//função para ler os sensores e checar se estão poucos humidos, caso sim , aguá-los
void aguar()
{
 8001f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		{
			while(adc[i]<100)
			{
				htim3.Instance->CCR1 = vaso[i]; // direciona a bomba para o vaso 'seco'
				HAL_Delay(1000);
				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,SET); // liga a bomba
 8001f5a:	2590      	movs	r5, #144	; 0x90
	lerAD();	 // Faz a leitura dos dois canais de AD, com DMA e interrupção
 8001f5c:	f7ff ffcc 	bl	8001ef8 <lerAD>
	for (int i = 0 ; i<2; i++)
 8001f60:	2400      	movs	r4, #0
	imprimirHum(); // manda os valores lidos para o aplicativo
 8001f62:	f7ff ff79 	bl	8001e58 <imprimirHum>
				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,SET); // liga a bomba
 8001f66:	05ed      	lsls	r5, r5, #23
		if(adc[i]<100)
 8001f68:	4f13      	ldr	r7, [pc, #76]	; (8001fb8 <aguar+0x60>)
 8001f6a:	0066      	lsls	r6, r4, #1
 8001f6c:	5bbb      	ldrh	r3, [r7, r6]
 8001f6e:	2b63      	cmp	r3, #99	; 0x63
 8001f70:	d918      	bls.n	8001fa4 <aguar+0x4c>
	for (int i = 0 ; i<2; i++)
 8001f72:	3401      	adds	r4, #1
 8001f74:	2c02      	cmp	r4, #2
 8001f76:	d1f7      	bne.n	8001f68 <aguar+0x10>
			}
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,RESET); // desliga a bomba
		}

	}
}
 8001f78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				HAL_Delay(1000);
 8001f7a:	20fa      	movs	r0, #250	; 0xfa
				htim3.Instance->CCR1 = vaso[i]; // direciona a bomba para o vaso 'seco'
 8001f7c:	4b0f      	ldr	r3, [pc, #60]	; (8001fbc <aguar+0x64>)
 8001f7e:	4a10      	ldr	r2, [pc, #64]	; (8001fc0 <aguar+0x68>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	5d12      	ldrb	r2, [r2, r4]
				HAL_Delay(1000);
 8001f84:	0080      	lsls	r0, r0, #2
				htim3.Instance->CCR1 = vaso[i]; // direciona a bomba para o vaso 'seco'
 8001f86:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(1000);
 8001f88:	f7fe fa6e 	bl	8000468 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,SET); // liga a bomba
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	2110      	movs	r1, #16
 8001f90:	0028      	movs	r0, r5
 8001f92:	f7fe ff6d 	bl	8000e70 <HAL_GPIO_WritePin>
				HAL_Delay(50);
 8001f96:	2032      	movs	r0, #50	; 0x32
 8001f98:	f7fe fa66 	bl	8000468 <HAL_Delay>
				lerAD();	   // Faz a leitura dos dois canais de AD, com DMA e interrupção
 8001f9c:	f7ff ffac 	bl	8001ef8 <lerAD>
				imprimirHum(); // manda os valores lidos para o aplicativo
 8001fa0:	f7ff ff5a 	bl	8001e58 <imprimirHum>
			while(adc[i]<100)
 8001fa4:	5bbb      	ldrh	r3, [r7, r6]
 8001fa6:	2b63      	cmp	r3, #99	; 0x63
 8001fa8:	d9e7      	bls.n	8001f7a <aguar+0x22>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,RESET); // desliga a bomba
 8001faa:	2200      	movs	r2, #0
 8001fac:	2110      	movs	r1, #16
 8001fae:	0028      	movs	r0, r5
 8001fb0:	f7fe ff5e 	bl	8000e70 <HAL_GPIO_WritePin>
 8001fb4:	e7dd      	b.n	8001f72 <aguar+0x1a>
 8001fb6:	46c0      	nop			; (mov r8, r8)
 8001fb8:	200000dc 	.word	0x200000dc
 8001fbc:	20000028 	.word	0x20000028
 8001fc0:	20000000 	.word	0x20000000

08001fc4 <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8001fc4:	2312      	movs	r3, #18
{
 8001fc6:	b510      	push	{r4, lr}
 8001fc8:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8001fca:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001fcc:	3b02      	subs	r3, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001fce:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001fd0:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8001fd2:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001fd4:	2300      	movs	r3, #0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fd6:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001fd8:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8001fda:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001fdc:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fde:	f7fe ff4d 	bl	8000e7c <HAL_RCC_OscConfig>
 8001fe2:	1e01      	subs	r1, r0, #0
 8001fe4:	d000      	beq.n	8001fe8 <SystemClock_Config+0x24>
 8001fe6:	e7fe      	b.n	8001fe6 <SystemClock_Config+0x22>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fe8:	2307      	movs	r3, #7
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001fea:	9001      	str	r0, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fec:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001fee:	9003      	str	r0, [sp, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001ff0:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ff2:	9300      	str	r3, [sp, #0]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001ff4:	f7ff f956 	bl	80012a4 <HAL_RCC_ClockConfig>
 8001ff8:	2800      	cmp	r0, #0
 8001ffa:	d000      	beq.n	8001ffe <SystemClock_Config+0x3a>
 8001ffc:	e7fe      	b.n	8001ffc <SystemClock_Config+0x38>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001ffe:	9006      	str	r0, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002000:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002002:	9404      	str	r4, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002004:	f7ff f9fa 	bl	80013fc <HAL_RCCEx_PeriphCLKConfig>
 8002008:	1e04      	subs	r4, r0, #0
 800200a:	d000      	beq.n	800200e <SystemClock_Config+0x4a>
 800200c:	e7fe      	b.n	800200c <SystemClock_Config+0x48>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800200e:	f7ff f9df 	bl	80013d0 <HAL_RCC_GetHCLKFreq>
 8002012:	21fa      	movs	r1, #250	; 0xfa
 8002014:	0089      	lsls	r1, r1, #2
 8002016:	f7fe f881 	bl	800011c <__udivsi3>
 800201a:	f7fe fd7b 	bl	8000b14 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800201e:	2004      	movs	r0, #4
 8002020:	f7fe fd92 	bl	8000b48 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002024:	2001      	movs	r0, #1
 8002026:	0022      	movs	r2, r4
 8002028:	0021      	movs	r1, r4
 800202a:	4240      	negs	r0, r0
 800202c:	f7fe fd38 	bl	8000aa0 <HAL_NVIC_SetPriority>
}
 8002030:	b014      	add	sp, #80	; 0x50
 8002032:	bd10      	pop	{r4, pc}

08002034 <main>:
{
 8002034:	b570      	push	{r4, r5, r6, lr}
 8002036:	b090      	sub	sp, #64	; 0x40
  HAL_Init();
 8002038:	f7fe f9f8 	bl	800042c <HAL_Init>
  SystemClock_Config();
 800203c:	f7ff ffc2 	bl	8001fc4 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002040:	2180      	movs	r1, #128	; 0x80

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8002042:	2090      	movs	r0, #144	; 0x90
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002044:	4e56      	ldr	r6, [pc, #344]	; (80021a0 <main+0x16c>)
 8002046:	0289      	lsls	r1, r1, #10
 8002048:	6972      	ldr	r2, [r6, #20]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800204a:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800204c:	430a      	orrs	r2, r1
 800204e:	6172      	str	r2, [r6, #20]
 8002050:	6973      	ldr	r3, [r6, #20]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8002052:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002054:	400b      	ands	r3, r1
 8002056:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8002058:	2110      	movs	r1, #16
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800205a:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800205c:	f7fe ff08 	bl	8000e70 <HAL_GPIO_WritePin>
  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002060:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002062:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002064:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002066:	2501      	movs	r5, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002068:	a909      	add	r1, sp, #36	; 0x24
 800206a:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800206c:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800206e:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002070:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002072:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002074:	f7fe fe4c 	bl	8000d10 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002078:	6973      	ldr	r3, [r6, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800207a:	0022      	movs	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 800207c:	432b      	orrs	r3, r5
 800207e:	6173      	str	r3, [r6, #20]
 8002080:	6973      	ldr	r3, [r6, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002082:	0021      	movs	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002084:	402b      	ands	r3, r5
 8002086:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002088:	2009      	movs	r0, #9
  __HAL_RCC_DMA1_CLK_ENABLE();
 800208a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800208c:	f7fe fd08 	bl	8000aa0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002090:	2009      	movs	r0, #9
 8002092:	f7fe fd35 	bl	8000b00 <HAL_NVIC_EnableIRQ>
  huart1.Instance = USART1;
 8002096:	4843      	ldr	r0, [pc, #268]	; (80021a4 <main+0x170>)
 8002098:	4b43      	ldr	r3, [pc, #268]	; (80021a8 <main+0x174>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800209a:	6084      	str	r4, [r0, #8]
  huart1.Instance = USART1;
 800209c:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 9600;
 800209e:	2396      	movs	r3, #150	; 0x96
 80020a0:	019b      	lsls	r3, r3, #6
 80020a2:	6043      	str	r3, [r0, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80020a4:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 80020a6:	60c4      	str	r4, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80020a8:	6104      	str	r4, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80020aa:	6143      	str	r3, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020ac:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80020ae:	61c4      	str	r4, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020b0:	6204      	str	r4, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020b2:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80020b4:	f7ff fdfc 	bl	8001cb0 <HAL_UART_Init>
 80020b8:	42a0      	cmp	r0, r4
 80020ba:	d000      	beq.n	80020be <main+0x8a>
 80020bc:	e7fe      	b.n	80020bc <main+0x88>
  hadc.Instance = ADC1;
 80020be:	4c3b      	ldr	r4, [pc, #236]	; (80021ac <main+0x178>)
 80020c0:	4b3b      	ldr	r3, [pc, #236]	; (80021b0 <main+0x17c>)
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80020c2:	6060      	str	r0, [r4, #4]
  hadc.Instance = ADC1;
 80020c4:	6023      	str	r3, [r4, #0]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80020c6:	2304      	movs	r3, #4
 80020c8:	6163      	str	r3, [r4, #20]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80020ca:	23c2      	movs	r3, #194	; 0xc2
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80020cc:	60a0      	str	r0, [r4, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80020ce:	60e0      	str	r0, [r4, #12]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80020d0:	61a0      	str	r0, [r4, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80020d2:	61e0      	str	r0, [r4, #28]
  hadc.Init.ContinuousConvMode = DISABLE;
 80020d4:	6220      	str	r0, [r4, #32]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80020d6:	6260      	str	r0, [r4, #36]	; 0x24
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80020d8:	33ff      	adds	r3, #255	; 0xff
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80020da:	62e0      	str	r0, [r4, #44]	; 0x2c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80020dc:	0020      	movs	r0, r4
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80020de:	6125      	str	r5, [r4, #16]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80020e0:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = ENABLE;
 80020e2:	6325      	str	r5, [r4, #48]	; 0x30
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80020e4:	6365      	str	r5, [r4, #52]	; 0x34
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80020e6:	f7fe fa7f 	bl	80005e8 <HAL_ADC_Init>
 80020ea:	2800      	cmp	r0, #0
 80020ec:	d000      	beq.n	80020f0 <main+0xbc>
 80020ee:	e7fe      	b.n	80020ee <main+0xba>
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80020f0:	2680      	movs	r6, #128	; 0x80
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80020f2:	2380      	movs	r3, #128	; 0x80
  sConfig.Channel = ADC_CHANNEL_0;
 80020f4:	9009      	str	r0, [sp, #36]	; 0x24
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80020f6:	0176      	lsls	r6, r6, #5
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80020f8:	055b      	lsls	r3, r3, #21
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80020fa:	a909      	add	r1, sp, #36	; 0x24
 80020fc:	0020      	movs	r0, r4
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80020fe:	960a      	str	r6, [sp, #40]	; 0x28
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002100:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002102:	f7fe fc57 	bl	80009b4 <HAL_ADC_ConfigChannel>
 8002106:	2800      	cmp	r0, #0
 8002108:	d000      	beq.n	800210c <main+0xd8>
 800210a:	e7fe      	b.n	800210a <main+0xd6>
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800210c:	a909      	add	r1, sp, #36	; 0x24
 800210e:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_1;
 8002110:	9509      	str	r5, [sp, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002112:	f7fe fc4f 	bl	80009b4 <HAL_ADC_ConfigChannel>
 8002116:	2800      	cmp	r0, #0
 8002118:	d000      	beq.n	800211c <main+0xe8>
 800211a:	e7fe      	b.n	800211a <main+0xe6>
  htim3.Instance = TIM3;
 800211c:	4c25      	ldr	r4, [pc, #148]	; (80021b4 <main+0x180>)
 800211e:	4b26      	ldr	r3, [pc, #152]	; (80021b8 <main+0x184>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002120:	60a0      	str	r0, [r4, #8]
  htim3.Instance = TIM3;
 8002122:	6023      	str	r3, [r4, #0]
  htim3.Init.Prescaler = 160;
 8002124:	23a0      	movs	r3, #160	; 0xa0
 8002126:	6063      	str	r3, [r4, #4]
  htim3.Init.Period = 1000;
 8002128:	23fa      	movs	r3, #250	; 0xfa
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800212a:	6120      	str	r0, [r4, #16]
  htim3.Init.Period = 1000;
 800212c:	009b      	lsls	r3, r3, #2
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800212e:	61a0      	str	r0, [r4, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002130:	0020      	movs	r0, r4
  htim3.Init.Period = 1000;
 8002132:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002134:	f7ff fae4 	bl	8001700 <HAL_TIM_Base_Init>
 8002138:	2800      	cmp	r0, #0
 800213a:	d000      	beq.n	800213e <main+0x10a>
 800213c:	e7fe      	b.n	800213c <main+0x108>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800213e:	a905      	add	r1, sp, #20
 8002140:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002142:	9605      	str	r6, [sp, #20]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002144:	f7ff fbc4 	bl	80018d0 <HAL_TIM_ConfigClockSource>
 8002148:	2800      	cmp	r0, #0
 800214a:	d000      	beq.n	800214e <main+0x11a>
 800214c:	e7fe      	b.n	800214c <main+0x118>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800214e:	0020      	movs	r0, r4
 8002150:	f7ff faf1 	bl	8001736 <HAL_TIM_PWM_Init>
 8002154:	2800      	cmp	r0, #0
 8002156:	d000      	beq.n	800215a <main+0x126>
 8002158:	e7fe      	b.n	8002158 <main+0x124>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800215a:	9003      	str	r0, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800215c:	9004      	str	r0, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800215e:	a903      	add	r1, sp, #12
 8002160:	0020      	movs	r0, r4
 8002162:	f7ff fc97 	bl	8001a94 <HAL_TIMEx_MasterConfigSynchronization>
 8002166:	1e02      	subs	r2, r0, #0
 8002168:	d000      	beq.n	800216c <main+0x138>
 800216a:	e7fe      	b.n	800216a <main+0x136>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800216c:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 800216e:	900a      	str	r0, [sp, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002170:	900b      	str	r0, [sp, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002172:	900d      	str	r0, [sp, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002174:	a909      	add	r1, sp, #36	; 0x24
 8002176:	0020      	movs	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002178:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800217a:	f7ff fb33 	bl	80017e4 <HAL_TIM_PWM_ConfigChannel>
 800217e:	1e05      	subs	r5, r0, #0
 8002180:	d000      	beq.n	8002184 <main+0x150>
 8002182:	e7fe      	b.n	8002182 <main+0x14e>
  HAL_TIM_MspPostInit(&htim3);
 8002184:	0020      	movs	r0, r4
 8002186:	f000 f8a1 	bl	80022cc <HAL_TIM_MspPostInit>
  HAL_TIM_Base_Start(&htim3);
 800218a:	0020      	movs	r0, r4
 800218c:	f7ff fa6a 	bl	8001664 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002190:	0029      	movs	r1, r5
 8002192:	0020      	movs	r0, r4
 8002194:	f7ff fc5c 	bl	8001a50 <HAL_TIM_PWM_Start>
	  aguar();
 8002198:	f7ff fede 	bl	8001f58 <aguar>
 800219c:	e7fc      	b.n	8002198 <main+0x164>
 800219e:	46c0      	nop			; (mov r8, r8)
 80021a0:	40021000 	.word	0x40021000
 80021a4:	20000068 	.word	0x20000068
 80021a8:	40013800 	.word	0x40013800
 80021ac:	20000124 	.word	0x20000124
 80021b0:	40012400 	.word	0x40012400
 80021b4:	20000028 	.word	0x20000028
 80021b8:	40000400 	.word	0x40000400

080021bc <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 80021bc:	e7fe      	b.n	80021bc <_Error_Handler>
	...

080021c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021c0:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021c2:	2001      	movs	r0, #1
 80021c4:	4b11      	ldr	r3, [pc, #68]	; (800220c <HAL_MspInit+0x4c>)
 80021c6:	6999      	ldr	r1, [r3, #24]
 80021c8:	4301      	orrs	r1, r0
 80021ca:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021cc:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ce:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021d0:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021d2:	4002      	ands	r2, r0
 80021d4:	9200      	str	r2, [sp, #0]
 80021d6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021d8:	69da      	ldr	r2, [r3, #28]

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 80021da:	3806      	subs	r0, #6
  __HAL_RCC_PWR_CLK_ENABLE();
 80021dc:	430a      	orrs	r2, r1
 80021de:	61da      	str	r2, [r3, #28]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 80021e0:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 80021e2:	69db      	ldr	r3, [r3, #28]
 80021e4:	400b      	ands	r3, r1
 80021e6:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 80021e8:	0011      	movs	r1, r2
  __HAL_RCC_PWR_CLK_ENABLE();
 80021ea:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 80021ec:	f7fe fc58 	bl	8000aa0 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80021f0:	2200      	movs	r2, #0
 80021f2:	2002      	movs	r0, #2
 80021f4:	0011      	movs	r1, r2
 80021f6:	4240      	negs	r0, r0
 80021f8:	f7fe fc52 	bl	8000aa0 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80021fc:	2200      	movs	r2, #0
 80021fe:	2001      	movs	r0, #1
 8002200:	0011      	movs	r1, r2
 8002202:	4240      	negs	r0, r0
 8002204:	f7fe fc4c 	bl	8000aa0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002208:	bd07      	pop	{r0, r1, r2, pc}
 800220a:	46c0      	nop			; (mov r8, r8)
 800220c:	40021000 	.word	0x40021000

08002210 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002210:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8002212:	4b1f      	ldr	r3, [pc, #124]	; (8002290 <HAL_ADC_MspInit+0x80>)
 8002214:	6802      	ldr	r2, [r0, #0]
{
 8002216:	b086      	sub	sp, #24
 8002218:	0006      	movs	r6, r0
  if(hadc->Instance==ADC1)
 800221a:	429a      	cmp	r2, r3
 800221c:	d135      	bne.n	800228a <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800221e:	2080      	movs	r0, #128	; 0x80
 8002220:	4a1c      	ldr	r2, [pc, #112]	; (8002294 <HAL_ADC_MspInit+0x84>)
 8002222:	0080      	lsls	r0, r0, #2
 8002224:	6991      	ldr	r1, [r2, #24]
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002226:	2500      	movs	r5, #0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002228:	4301      	orrs	r1, r0
 800222a:	6191      	str	r1, [r2, #24]
 800222c:	6993      	ldr	r3, [r2, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800222e:	a901      	add	r1, sp, #4
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002230:	4003      	ands	r3, r0
 8002232:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002234:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002236:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002238:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800223a:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800223c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800223e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002240:	9503      	str	r5, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002242:	f7fe fd65 	bl	8000d10 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8002246:	4c14      	ldr	r4, [pc, #80]	; (8002298 <HAL_ADC_MspInit+0x88>)
 8002248:	4b14      	ldr	r3, [pc, #80]	; (800229c <HAL_ADC_MspInit+0x8c>)
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc.Init.Mode = DMA_CIRCULAR;
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 800224a:	0020      	movs	r0, r4
    hdma_adc.Instance = DMA1_Channel1;
 800224c:	6023      	str	r3, [r4, #0]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 800224e:	2380      	movs	r3, #128	; 0x80
 8002250:	60e3      	str	r3, [r4, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002252:	18db      	adds	r3, r3, r3
 8002254:	6123      	str	r3, [r4, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002256:	2380      	movs	r3, #128	; 0x80
 8002258:	00db      	lsls	r3, r3, #3
 800225a:	6163      	str	r3, [r4, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 800225c:	2320      	movs	r3, #32
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800225e:	6065      	str	r5, [r4, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8002260:	60a5      	str	r5, [r4, #8]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8002262:	61a3      	str	r3, [r4, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8002264:	61e5      	str	r5, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8002266:	f7fe fc83 	bl	8000b70 <HAL_DMA_Init>
 800226a:	42a8      	cmp	r0, r5
 800226c:	d003      	beq.n	8002276 <HAL_ADC_MspInit+0x66>
    {
      _Error_Handler(__FILE__, __LINE__);
 800226e:	216a      	movs	r1, #106	; 0x6a
 8002270:	480b      	ldr	r0, [pc, #44]	; (80022a0 <HAL_ADC_MspInit+0x90>)
 8002272:	f7ff ffa3 	bl	80021bc <_Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8002276:	2200      	movs	r2, #0
 8002278:	200c      	movs	r0, #12
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 800227a:	63f4      	str	r4, [r6, #60]	; 0x3c
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 800227c:	0011      	movs	r1, r2
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 800227e:	6266      	str	r6, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8002280:	f7fe fc0e 	bl	8000aa0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8002284:	200c      	movs	r0, #12
 8002286:	f7fe fc3b 	bl	8000b00 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800228a:	b006      	add	sp, #24
 800228c:	bd70      	pop	{r4, r5, r6, pc}
 800228e:	46c0      	nop			; (mov r8, r8)
 8002290:	40012400 	.word	0x40012400
 8002294:	40021000 	.word	0x40021000
 8002298:	200000e0 	.word	0x200000e0
 800229c:	40020008 	.word	0x40020008
 80022a0:	080024c4 	.word	0x080024c4

080022a4 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM3)
 80022a4:	4b07      	ldr	r3, [pc, #28]	; (80022c4 <HAL_TIM_Base_MspInit+0x20>)
 80022a6:	6802      	ldr	r2, [r0, #0]
{
 80022a8:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM3)
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d108      	bne.n	80022c0 <HAL_TIM_Base_MspInit+0x1c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80022ae:	2002      	movs	r0, #2
 80022b0:	4a05      	ldr	r2, [pc, #20]	; (80022c8 <HAL_TIM_Base_MspInit+0x24>)
 80022b2:	69d1      	ldr	r1, [r2, #28]
 80022b4:	4301      	orrs	r1, r0
 80022b6:	61d1      	str	r1, [r2, #28]
 80022b8:	69d3      	ldr	r3, [r2, #28]
 80022ba:	4003      	ands	r3, r0
 80022bc:	9301      	str	r3, [sp, #4]
 80022be:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80022c0:	b002      	add	sp, #8
 80022c2:	4770      	bx	lr
 80022c4:	40000400 	.word	0x40000400
 80022c8:	40021000 	.word	0x40021000

080022cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80022cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM3)
 80022ce:	4b0a      	ldr	r3, [pc, #40]	; (80022f8 <HAL_TIM_MspPostInit+0x2c>)
 80022d0:	6802      	ldr	r2, [r0, #0]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d10d      	bne.n	80022f2 <HAL_TIM_MspPostInit+0x26>
  /* USER CODE END TIM3_MspPostInit 0 */
  
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80022d6:	2340      	movs	r3, #64	; 0x40
 80022d8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022da:	3b3e      	subs	r3, #62	; 0x3e
 80022dc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022de:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e0:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e2:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e6:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e8:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80022ea:	3301      	adds	r3, #1
 80022ec:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ee:	f7fe fd0f 	bl	8000d10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80022f2:	b007      	add	sp, #28
 80022f4:	bd00      	pop	{pc}
 80022f6:	46c0      	nop			; (mov r8, r8)
 80022f8:	40000400 	.word	0x40000400

080022fc <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 80022fe:	4b0f      	ldr	r3, [pc, #60]	; (800233c <HAL_UART_MspInit+0x40>)
 8002300:	6802      	ldr	r2, [r0, #0]
 8002302:	429a      	cmp	r2, r3
 8002304:	d118      	bne.n	8002338 <HAL_UART_MspInit+0x3c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002306:	2080      	movs	r0, #128	; 0x80
 8002308:	4a0d      	ldr	r2, [pc, #52]	; (8002340 <HAL_UART_MspInit+0x44>)
 800230a:	01c0      	lsls	r0, r0, #7
 800230c:	6991      	ldr	r1, [r2, #24]
 800230e:	4301      	orrs	r1, r0
 8002310:	6191      	str	r1, [r2, #24]
 8002312:	6993      	ldr	r3, [r2, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002314:	a901      	add	r1, sp, #4
    __HAL_RCC_USART1_CLK_ENABLE();
 8002316:	4003      	ands	r3, r0
 8002318:	9300      	str	r3, [sp, #0]
 800231a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800231c:	230c      	movs	r3, #12
 800231e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002320:	3b0a      	subs	r3, #10
 8002322:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002324:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002326:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002328:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800232a:	3303      	adds	r3, #3
 800232c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800232e:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002330:	3b02      	subs	r3, #2
 8002332:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002334:	f7fe fcec 	bl	8000d10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002338:	b007      	add	sp, #28
 800233a:	bd00      	pop	{pc}
 800233c:	40013800 	.word	0x40013800
 8002340:	40021000 	.word	0x40021000

08002344 <NMI_Handler>:
 8002344:	4770      	bx	lr

08002346 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002346:	e7fe      	b.n	8002346 <HardFault_Handler>

08002348 <SVC_Handler>:
 8002348:	4770      	bx	lr

0800234a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800234a:	4770      	bx	lr

0800234c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800234c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800234e:	f7fe f87d 	bl	800044c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8002352:	f7fe fc08 	bl	8000b66 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002356:	bd10      	pop	{r4, pc}

08002358 <DMA1_Channel1_IRQHandler>:

/**
* @brief This function handles DMA1 channel 1 interrupt.
*/
void DMA1_Channel1_IRQHandler(void)
{
 8002358:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 800235a:	4802      	ldr	r0, [pc, #8]	; (8002364 <DMA1_Channel1_IRQHandler+0xc>)
 800235c:	f7fe fc8e 	bl	8000c7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002360:	bd10      	pop	{r4, pc}
 8002362:	46c0      	nop			; (mov r8, r8)
 8002364:	200000e0 	.word	0x200000e0

08002368 <ADC1_IRQHandler>:

/**
* @brief This function handles ADC interrupt.
*/
void ADC1_IRQHandler(void)
{
 8002368:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 800236a:	4802      	ldr	r0, [pc, #8]	; (8002374 <ADC1_IRQHandler+0xc>)
 800236c:	f7fe fab2 	bl	80008d4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8002370:	bd10      	pop	{r4, pc}
 8002372:	46c0      	nop			; (mov r8, r8)
 8002374:	20000124 	.word	0x20000124

08002378 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8002378:	2101      	movs	r1, #1
 800237a:	4b11      	ldr	r3, [pc, #68]	; (80023c0 <SystemInit+0x48>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 800237c:	4811      	ldr	r0, [pc, #68]	; (80023c4 <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001U;
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	430a      	orrs	r2, r1
 8002382:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8002384:	685a      	ldr	r2, [r3, #4]
 8002386:	4002      	ands	r2, r0
 8002388:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	480e      	ldr	r0, [pc, #56]	; (80023c8 <SystemInit+0x50>)
 800238e:	4002      	ands	r2, r0
 8002390:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	480d      	ldr	r0, [pc, #52]	; (80023cc <SystemInit+0x54>)
 8002396:	4002      	ands	r2, r0
 8002398:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 800239a:	685a      	ldr	r2, [r3, #4]
 800239c:	480c      	ldr	r0, [pc, #48]	; (80023d0 <SystemInit+0x58>)
 800239e:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 80023a0:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 80023a2:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 80023a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023a6:	4382      	bics	r2, r0
 80023a8:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 80023aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023ac:	4809      	ldr	r0, [pc, #36]	; (80023d4 <SystemInit+0x5c>)
 80023ae:	4002      	ands	r2, r0
 80023b0:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 80023b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023b4:	438a      	bics	r2, r1
 80023b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80023b8:	2200      	movs	r2, #0
 80023ba:	609a      	str	r2, [r3, #8]

}
 80023bc:	4770      	bx	lr
 80023be:	46c0      	nop			; (mov r8, r8)
 80023c0:	40021000 	.word	0x40021000
 80023c4:	08ffb80c 	.word	0x08ffb80c
 80023c8:	fef6ffff 	.word	0xfef6ffff
 80023cc:	fffbffff 	.word	0xfffbffff
 80023d0:	ffc0ffff 	.word	0xffc0ffff
 80023d4:	fffffeec 	.word	0xfffffeec

080023d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80023d8:	480d      	ldr	r0, [pc, #52]	; (8002410 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80023da:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023dc:	480d      	ldr	r0, [pc, #52]	; (8002414 <LoopForever+0x6>)
  ldr r1, =_edata
 80023de:	490e      	ldr	r1, [pc, #56]	; (8002418 <LoopForever+0xa>)
  ldr r2, =_sidata
 80023e0:	4a0e      	ldr	r2, [pc, #56]	; (800241c <LoopForever+0xe>)
  movs r3, #0
 80023e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023e4:	e002      	b.n	80023ec <LoopCopyDataInit>

080023e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023ea:	3304      	adds	r3, #4

080023ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023f0:	d3f9      	bcc.n	80023e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023f2:	4a0b      	ldr	r2, [pc, #44]	; (8002420 <LoopForever+0x12>)
  ldr r4, =_ebss
 80023f4:	4c0b      	ldr	r4, [pc, #44]	; (8002424 <LoopForever+0x16>)
  movs r3, #0
 80023f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023f8:	e001      	b.n	80023fe <LoopFillZerobss>

080023fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023fc:	3204      	adds	r2, #4

080023fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002400:	d3fb      	bcc.n	80023fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002402:	f7ff ffb9 	bl	8002378 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002406:	f000 f811 	bl	800242c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800240a:	f7ff fe13 	bl	8002034 <main>

0800240e <LoopForever>:

LoopForever:
    b LoopForever
 800240e:	e7fe      	b.n	800240e <LoopForever>
  ldr   r0, =_estack
 8002410:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8002414:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002418:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 800241c:	08002500 	.word	0x08002500
  ldr r2, =_sbss
 8002420:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8002424:	20000170 	.word	0x20000170

08002428 <DMA1_Channel2_3_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002428:	e7fe      	b.n	8002428 <DMA1_Channel2_3_IRQHandler>
	...

0800242c <__libc_init_array>:
 800242c:	b570      	push	{r4, r5, r6, lr}
 800242e:	2600      	movs	r6, #0
 8002430:	4d0c      	ldr	r5, [pc, #48]	; (8002464 <__libc_init_array+0x38>)
 8002432:	4c0d      	ldr	r4, [pc, #52]	; (8002468 <__libc_init_array+0x3c>)
 8002434:	1b64      	subs	r4, r4, r5
 8002436:	10a4      	asrs	r4, r4, #2
 8002438:	42a6      	cmp	r6, r4
 800243a:	d109      	bne.n	8002450 <__libc_init_array+0x24>
 800243c:	2600      	movs	r6, #0
 800243e:	f000 f823 	bl	8002488 <_init>
 8002442:	4d0a      	ldr	r5, [pc, #40]	; (800246c <__libc_init_array+0x40>)
 8002444:	4c0a      	ldr	r4, [pc, #40]	; (8002470 <__libc_init_array+0x44>)
 8002446:	1b64      	subs	r4, r4, r5
 8002448:	10a4      	asrs	r4, r4, #2
 800244a:	42a6      	cmp	r6, r4
 800244c:	d105      	bne.n	800245a <__libc_init_array+0x2e>
 800244e:	bd70      	pop	{r4, r5, r6, pc}
 8002450:	00b3      	lsls	r3, r6, #2
 8002452:	58eb      	ldr	r3, [r5, r3]
 8002454:	4798      	blx	r3
 8002456:	3601      	adds	r6, #1
 8002458:	e7ee      	b.n	8002438 <__libc_init_array+0xc>
 800245a:	00b3      	lsls	r3, r6, #2
 800245c:	58eb      	ldr	r3, [r5, r3]
 800245e:	4798      	blx	r3
 8002460:	3601      	adds	r6, #1
 8002462:	e7f2      	b.n	800244a <__libc_init_array+0x1e>
 8002464:	080024f8 	.word	0x080024f8
 8002468:	080024f8 	.word	0x080024f8
 800246c:	080024f8 	.word	0x080024f8
 8002470:	080024fc 	.word	0x080024fc

08002474 <memcpy>:
 8002474:	2300      	movs	r3, #0
 8002476:	b510      	push	{r4, lr}
 8002478:	429a      	cmp	r2, r3
 800247a:	d100      	bne.n	800247e <memcpy+0xa>
 800247c:	bd10      	pop	{r4, pc}
 800247e:	5ccc      	ldrb	r4, [r1, r3]
 8002480:	54c4      	strb	r4, [r0, r3]
 8002482:	3301      	adds	r3, #1
 8002484:	e7f8      	b.n	8002478 <memcpy+0x4>
	...

08002488 <_init>:
 8002488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800248a:	46c0      	nop			; (mov r8, r8)
 800248c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800248e:	bc08      	pop	{r3}
 8002490:	469e      	mov	lr, r3
 8002492:	4770      	bx	lr

08002494 <_fini>:
 8002494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002496:	46c0      	nop			; (mov r8, r8)
 8002498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800249a:	bc08      	pop	{r3}
 800249c:	469e      	mov	lr, r3
 800249e:	4770      	bx	lr
